{"version":3,"file":"connect.cjs.development.js","sources":["../src/utils.ts","../src/auth.ts","../src/types/transactions.ts","../src/transactions/index.ts","../src/signature/index.ts","../src/signature/structuredData.ts","../src/ui.ts"],"sourcesContent":["export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { decodeToken } from 'jsontokens';\nimport type { AuthOptions, AuthResponsePayload } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__;\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = async (authOptions: AuthOptions) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Unable to authenticate without Hiro Wallet extension');\n  }\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  try {\n    const authResponse = await provider.authenticationRequest(authRequest);\n    await userSession.handlePendingSignIn(authResponse);\n    const token = decodeToken(authResponse);\n    const payload = token?.payload;\n    const authResponsePayload = payload as unknown as AuthResponsePayload;\n    onFinish?.({\n      authResponse,\n      authResponsePayload,\n      userSession,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during auth request', error);\n    onCancel?.();\n  }\n};\n\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  fee?: number | string;\n  /**\n   * Provide the Hiro Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BigInt | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { bytesToHex, hexToBytes } from '@stacks/common';\nimport { StacksTestnet } from '@stacks/network';\nimport {\n  ChainID,\n  deserializeTransaction,\n  PostCondition,\n  serializeCV,\n  serializePostCondition,\n} from '@stacks/transactions';\nimport { createUnsecuredToken, Json, SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedTxPayload,\n  SponsoredFinishedTxPayload,\n  STXTransferOptions,\n  STXTransferPayload,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  TransactionOptions,\n  TransactionPayload,\n  TransactionPopup,\n  TransactionTypes,\n} from '../types/transactions';\nimport { getStacksProvider } from '../utils';\n\n// TODO extract out of transactions\nexport const getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport function hasAppPrivateKey(userSession?: UserSession) {\n  try {\n    const session = getUserSession(userSession).loadUserData();\n    return session.appPrivateKey;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\n// TODO extract out of transactions\nexport function getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n\n  // Legacy auth using localstorage with appPrivateKey\n  if (hasAppPrivateKey(options.userSession)) {\n    const userSession = getUserSession(options.userSession);\n    const defaults: TransactionOptions = {\n      ...options,\n      network,\n      userSession,\n    };\n\n    return {\n      stxAddress: getStxAddress(defaults),\n      ...defaults,\n    };\n  }\n\n  // User has not authed, we're relying on the app having previously having been\n  // given permissions from  `stx_requestAccounts`, and the wallet recognising the app's origin\n  // const hasSetRequiredStxAddressPropForRequestAccountFlow = 'stxAddress' in options;\n  // if (!hasSetRequiredStxAddressPropForRequestAccountFlow) {\n  //   throw new Error(\n  //     'Must set property `stxAddress` when using `stx_requestAccounts to initiate transaction`'\n  //   );\n  // }\n  return { ...options, network };\n}\n\nfunction encodePostConditions(postConditions: PostCondition[]) {\n  return postConditions.map(pc => bytesToHex(serializePostCondition(pc)));\n}\n\nasync function signPayload(payload: TransactionPayload, privateKey: string) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({ ...payload, postConditions } as any);\n}\n\nfunction createUnsignedTransactionPayload(payload: Partial<TransactionPayload>) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  return createUnsecuredToken({ ...payload, postConditions } as unknown as Json);\n}\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBytes = hexToBytes(txRaw.replace(/^0x/, ''));\n    const stacksTransaction = deserializeTransaction(txBytes);\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return bytesToHex(serializeCV(arg));\n  });\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractCallPayload = {\n      ..._options,\n      functionArgs: args,\n      txType: TransactionTypes.ContractCall,\n      publicKey,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n  const payload: Partial<ContractCallPayload> = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractDeployPayload = {\n      ..._options,\n      publicKey,\n      txType: TransactionTypes.ContractDeploy,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<ContractDeployPayload> = {\n    ..._options,\n    txType: TransactionTypes.ContractDeploy,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: STXTransferPayload = {\n      ..._options,\n      amount: amount.toString(10),\n      publicKey,\n      txType: TransactionTypes.STXTransfer,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<STXTransferPayload> = {\n    ..._options,\n    amount: amount.toString(10),\n    txType: TransactionTypes.STXTransfer,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { ChainID } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport {\n  CommonSignatureRequestOptions,\n  SignatureOptions,\n  SignaturePayload,\n  SignaturePopup,\n  SignatureRequestOptions,\n} from '../types/signature';\nimport { getStacksProvider } from '../utils';\n\nfunction getStxAddress(options: CommonSignatureRequestOptions) {\n  const { userSession, network } = options;\n\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nasync function signPayload(payload: SignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultSignatureRequestOptions(options: CommonSignatureRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: CommonSignatureRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nasync function openSignaturePopup({ token, options }: SignaturePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const signatureResponse = await provider.signatureRequest(token);\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport interface SignatureRequestPayload {\n  message: string;\n}\n\nexport const signMessage = async (options: SignatureRequestOptions) => {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: SignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  return createUnsecuredToken(payload as any);\n};\n\nasync function generateTokenAndOpenPopup<T extends SignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openSignaturePopup({ token, options });\n}\n\nexport function openSignatureRequestPopup(options: SignatureRequestOptions) {\n  return generateTokenAndOpenPopup(options, signMessage);\n}\n","import { bytesToHex } from '@stacks/common';\nimport { serializeCV } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getDefaultSignatureRequestOptions } from '.';\nimport { getKeys, hasAppPrivateKey } from '../transactions';\nimport {\n  StructuredDataSignatureOptions,\n  StructuredDataSignaturePayload,\n  StructuredDataSignaturePopup,\n  StructuredDataSignatureRequestOptions,\n} from '../types/structuredDataSignature';\nimport { getStacksProvider } from '../utils';\n\nasync function generateTokenAndOpenPopup<T extends StructuredDataSignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openStructuredDataSignaturePopup({ token, options });\n}\n\nasync function signPayload(payload: StructuredDataSignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    message: bytesToHex(serializeCV(payload.message)),\n    domain: bytesToHex(serializeCV(payload.domain)),\n  } as any);\n}\n\nexport async function signStructuredMessage(options: StructuredDataSignatureRequestOptions) {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: StructuredDataSignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n    return signPayload(payload, privateKey);\n  }\n  // Type casting `any` as payload contains non-serialisable content,\n  // such as `StacksNetwork`\n  return createUnsecuredToken(options as any);\n}\n\nasync function openStructuredDataSignaturePopup({ token, options }: StructuredDataSignaturePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const signatureResponse = await provider.structuredDataSignatureRequest(token);\n\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport function openStructuredDataSignatureRequestPopup(\n  options: StructuredDataSignatureRequestOptions\n) {\n  return generateTokenAndOpenPopup(options, signStructuredMessage);\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui/loader';\nimport { getStacksProvider } from './utils';\n\nexport const showConnect = (authOptions: AuthOptions) => {\n  if (getStacksProvider()) {\n    void authenticate(authOptions);\n    return;\n  }\n  if (typeof window !== undefined) {\n    void defineCustomElements(window);\n    const element = document.createElement('connect-modal');\n    element.authOptions = authOptions;\n    document.body.appendChild(element);\n    const handleEsc = (ev: KeyboardEvent) => {\n      if (ev.key === 'Escape') {\n        document.removeEventListener('keydown', handleEsc);\n        element.remove();\n      }\n    };\n    document.addEventListener('keydown', handleEsc);\n  }\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n"],"names":["window","StacksProvider","BlockstackProvider","getStacksProvider","defaultAuthURL","version","__VERSION__","__CONNECT_VERSION__","isMobile","ua","navigator","userAgent","test","shouldUsePopup","getOrCreateUserSession","userSession","appConfig","AppConfig","document","location","href","UserSession","authenticate","authOptions","provider","Error","redirectTo","manifestPath","onFinish","onCancel","sendToSignIn","_userSession","appDetails","isUserSignedIn","signUserOut","transitKey","generateAndStoreTransitKey","authRequest","makeAuthRequest","origin","scopes","connectVersion","authenticationRequest","authResponse","handlePendingSignIn","token","decodeToken","payload","authResponsePayload","error","getUserData","loadUserData","isSignInPending","TransactionTypes2","TransactionTypes","ContractCallArgumentType2","ContractCallArgumentType","getUserSession","session","appPrivateKey","e","getKeys","privateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","hasAppPrivateKey","defaults","getStxAddress","postConditions","map","bytesToHex","serializePostCondition","pc","encodePostConditions","tokenSigner","TokenSigner","signAsync","createUnsecuredToken","openTransactionPopup","transactionRequest","txResponse","txRaw","txBytes","hexToBytes","replace","stacksTransaction","deserializeTransaction","sponsored","makeContractCallToken","functionArgs","_options","args","arg","serializeCV","payload2","txType","ContractCall","signPayload","createUnsignedTransactionPayload","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","toString","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup","signatureRequest","signatureResponse","signMessage","getDefaultSignatureRequestOptions","openSignaturePopup","openStructuredDataSignaturePopup","message","domain","structuredDataSignatureRequest","signStructuredMessage","showConnect","defineCustomElements","element","createElement","body","appendChild","handleEsc","ev","key","removeEventListener","remove","addEventListener","showBlockstackConnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAAoC;SAC3BA,OAAOC,cAAP,IAAyBD,OAAOE;;mCAGC;SACjC,CAAC,CAACC;;;ICCEC,iBAAiB;AAE9B,IAAMC,UAAUC,OAAhB;;AAEA,IAAI,OAAON,MAAP,KAAkB,WAAtB,EAAmC;SAC1BO,sBAAsBF;;;AAGxB,IAAMG,WAAW,SAAXA,QAAW,GAAM;MACtBC,KAAKC,UAAUC;;MACjB,WAAWC,IAAX,CAAgBH,EAAhB,GAAqB;WAChB;;;MAEL,mBAAmBG,IAAnB,CAAwBH,EAAxB,GAA6B;WACxB;;;SAEF,iBAAiBG,IAAjB,CAAsBH,EAAtB;;AAMF,IAAMI,iBAAiB,SAAjBA,cAAiB,GAAM;SAC3B,CAACL;;AAGH,IAAMM,yBAAyB,SAAzBA,sBAAyB,CAACC,WAAD,EAA4C;MAC5E,CAACA,aAAa;QACVC,YAAY,IAAIC,cAAJ,CAAc,CAAC,aAAD,CAAd,EAA+BC,SAASC,QAAT,CAAkBC,IAAjD;kBACJ,IAAIC,gBAAJ,CAAgB;AAAEL,MAAAA,WAAAA;AAAF,KAAhB;;;SAETD;;AAGF,IAAMO;mFAAe,iBAAOC,WAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,QADoB,GACTrB,mBADS;;AAAA,gBAErBqB,QAFqB;AAAA;AAAA;AAAA;;AAAA,kBAGlB,IAAIC,KAAJ,CAAU,sDAAV,CAHkB;;AAAA;AAAA,oCActBF,WAdsB,CAOxBG,UAPwB,EAOxBA,UAPwB,sCAOX,GAPW,0BAQxBC,YARwB,GActBJ,WAdsB,CAQxBI,YARwB,EASxBC,QATwB,GActBL,WAdsB,CASxBK,QATwB,EAUxBC,QAVwB,GActBN,WAdsB,CAUxBM,QAVwB,0BActBN,WAdsB,CAWxBO,YAXwB,EAWxBA,YAXwB,sCAWT,KAXS,0BAYXC,YAZW,GActBR,WAdsB,CAYxBR,WAZwB,EAaxBiB,UAbwB,GActBT,WAdsB,CAaxBS,UAbwB;AAepBjB,YAAAA,WAfoB,GAeND,uBAAuBiB,aAfjB;;gBAgBtBhB,YAAYkB,cAAZ,IAA8B;0BACpBC;;;AAERC,YAAAA,UAnBoB,GAmBPpB,YAAYqB,0BAAZ,EAnBO;AAoBpBC,YAAAA,WApBoB,GAoBNtB,YAAYuB,eAAZ,CAClBH,UADkB,OAEfjB,SAASC,QAAT,CAAkBoB,MAFH,GAEYb,UAFZ,OAGfR,SAASC,QAAT,CAAkBoB,MAHH,GAGYZ,YAHZ,EAIlBZ,YAAYC,SAAZ,CAAsBwB,MAJJ,EAKlB,MALkB,EAMlB,MANkB,EAOlB;AACEV,cAAAA,cAAAA,YADF;AAEEE,cAAAA,YAAAA,UAFF;AAGES,cAAAA,gBAAgBpC;AAHlB,aAPkB,CApBM;AAAA;AAAA;AAAA,mBAmCGmB,SAASkB,qBAAT,CAA+BL,WAA/B,CAnCH;;AAAA;AAmClBM,YAAAA,YAnCkB;AAAA;AAAA,mBAoClB5B,YAAY6B,mBAAZ,CAAgCD,YAAhC,CApCkB;;AAAA;AAqClBE,YAAAA,KArCkB,GAqCVC,uBAAYH,aArCF;AAsClBI,YAAAA,OAtCkB,GAsCRF,KAtCQ,oBAsCRA,MAAOE,OAtCC;AAuClBC,YAAAA,mBAvCkB,GAuCID,OAvCJ;iDAwCb;AACTJ,cAAAA,cAAAA,YADS;AAETK,cAAAA,qBAAAA,mBAFS;AAGTjC,cAAAA,aAAAA;AAHS;AAxCa;AAAA;;AAAA;AAAA;AAAA;oBA8ChBkC,MAAM;;;AA9CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAf3B;;;;AAmDN,IAAM4B;oFAAc,kBAAOnC,WAAP;AAAA;AAAA;AAAA;AAAA;0BACXD,uBAAuBC;;AADZ,iBAErBA,YAAYkB,cAAZ,EAFqB;AAAA;AAAA;AAAA;;AAAA,8CAGhBlB,YAAYoC,YAAZ,EAHgB;;AAAA;AAAA,iBAKrBpC,YAAYqC,eAAZ,EALqB;AAAA;AAAA;AAAA;;AAAA,8CAMhBrC,YAAY6B,mBAAZ,EANgB;;AAAA;AAAA,8CAQlB,IARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAdM;;;;;AC7CN,WAAKG,mBAAL;sCACU;wCACE;qCACH;CAHT,EAAKC,2DAAL;;AAUA,WAAKC,2BAAL;wCACI;sCACF;qCACD;2CACM;sCACL;CALF,EAAKC,2EAAL;;;;;ICtBMC,iBAAiB,SAAjBA,cAAiB,CAAC1B,YAAD,EAAgC;MACxDhB,cAAcgB;;MAEd,CAAChB,aAAa;QACVC,YAAY,IAAIC,cAAJ,CAAc,CAAC,aAAD,CAAd,EAA+BC,SAASC,QAAT,CAAkBC,IAAjD;kBACJ,IAAIC,gBAAJ,CAAgB;AAAEL,MAAAA,WAAAA;AAAF,KAAhB;;;SAETD;;AAGF,0BAA0BA,aAA2B;MACtD;QACI2C,UAAUD,eAAe1C,YAAf,CAA4BoC,YAA5B;WACTO,QAAQC;WACRC,GAAP;WACO;;;AAIJ,IAAMC,UAAU,SAAVA,OAAU,CAAC9B,YAAD,EAAgC;MAC/ChB,cAAc0C,eAAe1B;MAC7B+B,aAAa/C,YAAYoC,YAAZ,GAA2BQ;MACxCI,YAAYC,2BAAgBC,eAAhB,CAAgCH,UAAhC;SAEX;AAAEA,IAAAA,YAAAA,UAAF;AAAcC,IAAAA,WAAAA;AAAd;;AAIF,uBAAuBG,SAA6B;AAAA;;MACjDC,aAAqCD,QAArCC;MAAYpD,cAAyBmD,QAAzBnD;MAAaqD,UAAYF,QAAZE;MAE7BD,mBAAmBA;MACnB,CAACpD,WAAD,IAAgB,CAACqD,gBAAgB;MAC/BC,eAAetD,wDAAAA,YAAaoC,YAAb,GAA4BmB,4BAA5B,sBAAqCH;MACpDI,kDACHC,qBAAQC,WAAU,yBAClBD,qBAAQE,WAAU;MAEfC,UAA8BN,gCAAAA,aAAeE,aAAaH,QAAQQ;SACjED;;;AAGT,oBAAA,CAAqBT,OAArB,EAAkD;MAC1CE,YAAUF,QAAQE,OAAR,IAAmB,IAAIS,qBAAJ;;MAG/BC,iBAAiBZ,QAAQnD,cAAc;QACnCA,cAAc0C,eAAeS,QAAQnD;;QACrCgE,wBACDb;AACHE,MAAAA,SAAAA;AACArD,MAAAA,aAAAA;;;;AAIAoD,MAAAA,YAAYa,cAAcD;OACvBA;;;sBAYKb;AAASE,IAAAA,SAAAA;;;;AAGvB,6BAAA,CAA8Ba,cAA9B,EAA+D;SACtDA,eAAeC,GAAf,CAAmB,YAAA;AAAA,WAAMC,kBAAWC,oCAAuBC,IAAxC;AAAA,GAAnB;;;;;;;;0EAGT,kBAA2BtC,OAA3B,EAAwDe,UAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQmB,YAAAA,cADR,GAC2BlC,OAD3B,CACQkC,cADR;;gBAEMA,kBAAkB,OAAOA,eAAe,EAAtB,KAA6B,UAAU;+BAC1CK,qBAAqBL;;;AAElCM,YAAAA,WALR,GAKsB,IAAIC,sBAAJ,CAAgB,QAAhB,EAA0B1B,UAA1B,CALtB;AAAA,8CAMSyB,YAAYE,SAAZ,cAA2B1C,OAA3B;AAAoCkC,cAAAA,gBAAAA;AAApC,eANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA,yCAAA,CAA0ClC,OAA1C,EAAgF;MACxEkC,iBAAmBlC,QAAnBkC;;MACFA,kBAAkB,OAAOA,eAAe,EAAtB,KAA6B,UAAU;qBAC1CK,qBAAqBL;;;SAEjCS,6CAA0B3C;AAASkC,IAAAA,gBAAAA;;;;AAG5C,IAAMU;oFAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAS9C,YAAAA,KAAT,QAASA,KAAT,EAAgBqB,OAAhB,QAAgBA,OAAhB;AACrB1C,YAAAA,QADqB,GACVrB,mBADU;;AAAA,gBAEtBqB,QAFsB;AAAA;AAAA;AAAA;;AAAA,kBAGnB,IAAIC,KAAJ,CAAU,2BAAV,CAHmB;;AAAA;AAAA;AAAA;AAAA,mBAOAD,SAASoE,kBAAT,CAA4B/C,KAA5B,CAPA;;AAAA;AAOnBgD,YAAAA,UAPmB;AAQjBC,YAAAA,KARiB,GAQPD,UARO,CAQjBC,KARiB;AASnBC,YAAAA,OATmB,GASTC,kBAAWF,MAAMG,OAAN,CAAc,KAAd,EAAqB,EAArB,EATF;AAUnBC,YAAAA,iBAVmB,GAUCC,oCAAuBJ,QAVxB;;AAAA,kBAYrB,eAAe7B,OAAf,IAA0BA,QAAQkC,SAZb;AAAA;AAAA;AAAA;;oBAafxE,oCAAAA,sBACFiE;AACJK,cAAAA,mBAAAA;;AAfqB;;AAAA;oBAmBjBtE,oCAAAA,sBACFiE;AACJK,cAAAA,mBAAAA;;AArBuB;AAAA;;AAAA;AAAA;AAAA;oBAwBjBjD,MAAM;oBACNpB,oCAAAA;;AAzBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAvB8D;;;GAAN;;AA6BO,IAAMU;oFAAwB,kBAAOnC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3BoC,YAAAA,YAD2B,GAC4BpC,OAD5B,CAC3BoC,YAD2B,EACbtE,UADa,GAC4BkC,OAD5B,CACblC,UADa,EACDjB,WADC,GAC4BmD,OAD5B,CACDnD,WADC,EACewF,QADf,iCAC4BrC,OAD5B;AAG7BsC,YAAAA,IAH6B,GAGZF,aAAapB,GAAb,CAAiB,aAAA,EAAO;kBACzC,OAAOuB,GAAP,KAAe,UAAU;uBACpBA;;;qBAEFtB,kBAAWuB,yBAAYD;aAJT,CAHY;;AAAA,iBAS/B3B,iBAAiB/D,YATc;AAAA;AAAA;AAAA;;AAAA,uBAUC8C,QAAQ9C,YAVT,EAUzB+C,UAVyB,YAUzBA,UAVyB,EAUbC,SAVa,YAUbA,SAVa;AAW3B4C,YAAAA,QAX2B,gBAY5BJ,QAZ4B;AAa/BD,cAAAA,cAAcE,IAbiB;AAc/BI,cAAAA,QAAQtD,yBAAiBuD,YAdM;AAe/B9C,cAAAA,WAAAA;AAf+B;gBAiB7B/B,qBAAoBA,aAAaA;AAjBJ,8CAkB1B8E,YAAYH,UAAS7C,WAlBK;;AAAA;AAoB7Bf,YAAAA,OApB6B,gBAqB9BwD,QArB8B;AAsBjCD,cAAAA,cAAcE,IAtBmB;AAuBjCI,cAAAA,QAAQtD,yBAAiBuD;AAvBQ;gBAyB/B7E,oBAAoBA,aAAaA;AAzBF,8CA0B5B+E,iCAAiChE,QA1BL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAxBsD;;;;AA6BN,IAAMW;oFAA0B,kBAAO9C,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BlC,YAAAA,UAD6B,GACYkC,OADZ,CAC7BlC,UAD6B,EACjBjB,WADiB,GACYmD,OADZ,CACjBnD,WADiB,EACDwF,QADC,iCACYrC,OADZ;;AAAA,iBAEjCY,iBAAiB/D,YAFgB;AAAA;AAAA;AAAA;;AAAA,wBAGD8C,QAAQ9C,YAHP,EAG3B+C,UAH2B,aAG3BA,UAH2B,EAGfC,SAHe,aAGfA,SAHe;AAI7B4C,YAAAA,QAJ6B,gBAK9BJ,QAL8B;AAMjCxC,cAAAA,WAAAA,SANiC;AAOjC6C,cAAAA,QAAQtD,yBAAiB2D;AAPQ;gBAS/BjF,qBAAoBA,aAAaA;AATF,8CAU5B8E,YAAYH,UAAS7C,WAVO;;AAAA;AAa/Bf,YAAAA,OAb+B,gBAchCwD,QAdgC;AAenCK,cAAAA,QAAQtD,yBAAiB2D;AAfU;gBAiBjCjF,oBAAoBA,aAAaA;AAjBA,8CAkB9B+E,iCAAiChE,QAlBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAA1BiE;;;;AAqBN,IAAME;oFAAuB,kBAAOhD,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BiD,YAAAA,MAD0B,GACuBjD,OADvB,CAC1BiD,MAD0B,EAClBnF,UADkB,GACuBkC,OADvB,CAClBlC,UADkB,EACNjB,WADM,GACuBmD,OADvB,CACNnD,WADM,EACUwF,QADV,iCACuBrC,OADvB;;AAAA,iBAG9BY,iBAAiB/D,YAHa;AAAA;AAAA;AAAA;;AAAA,wBAIE8C,QAAQ9C,YAJV,EAIxB+C,UAJwB,aAIxBA,UAJwB,EAIZC,SAJY,aAIZA,SAJY;AAK1B4C,YAAAA,QAL0B,gBAM3BJ,QAN2B;AAO9BY,cAAAA,QAAQA,OAAOC,QAAP,CAAgB,EAAhB,CAPsB;AAQ9BrD,cAAAA,WAAAA,SAR8B;AAS9B6C,cAAAA,QAAQtD,yBAAiB+D;AATK;gBAW5BrF,qBAAoBA,aAAaA;AAXL,8CAYzB8E,YAAYH,UAAS7C,WAZI;;AAAA;AAe5Bf,YAAAA,OAf4B,gBAgB7BwD,QAhB6B;AAiBhCY,cAAAA,QAAQA,OAAOC,QAAP,CAAgB,EAAhB,CAjBwB;AAkBhCR,cAAAA,QAAQtD,yBAAiB+D;AAlBO;gBAoB9BrF,oBAAoBA,aAAaA;AApBH,8CAqB3B+E,iCAAiChE,QArBN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAvBmE;;;;;;;;;;wFAwBb,kBACEhD,OADF,EAEEoD,WAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIsBA,yBACfC,YAAYrD,UACZA,SANP;;AAAA;AAIQrB,YAAAA,KAJR;AAAA,8CAQS8C,qBAAqB;AAAE9C,cAAAA,OAAAA,KAAF;AAASqB,cAAAA,SAAAA;AAAT,cAR9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAcO,0BAA0BA,SAA8B;SACtDsD,0BAA0BtD,SAASmC;;AAMrC,4BAA4BnC,SAAgC;SAC1DsD,0BAA0BtD,SAAS8C;;AAMrC,yBAAyB9C,SAA6B;SACpDsD,0BAA0BtD,SAASgD;;;;;ACrP5C,wBAAA,CAAuBhD,OAAvB,EAA+D;AAAA;;MACrDnD,cAAyBmD,QAAzBnD;MAAaqD,UAAYF,QAAZE;MAEjB,CAACrD,WAAD,IAAgB,CAACqD,gBAAgB;MAC/BC,eAAetD,wDAAAA,YAAaoC,YAAb,GAA4BmB,4BAA5B,sBAAqCH;MACpDI,kDACHC,qBAAQC,WAAU,yBAClBD,qBAAQE,WAAU;MAEfC,UAA8BN,gCAAAA,aAAeE,aAAaH,QAAQQ;SACjED;;;;;;;;4EAGT,kBAA2B5B,OAA3B,EAAsDe,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQyB,YAAAA,WADR,GACsB,IAAIC,sBAAJ,CAAgB,QAAhB,EAA0B1B,UAA1B,CADtB;AAAA,8CAESyB,YAAYE,SAAZ,cAA2B1C,OAA3B,EAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKO,2CAA2CmB,SAAwC;MAClFE,YAAUF,QAAQE,OAAR,IAAmB,IAAIS,qBAAJ;MAC7B9D,cAAc0C,eAAeS,QAAQnD;;MACrCgE,wBACDb;AACHE,IAAAA,SAAAA;AACArD,IAAAA,aAAAA;;;;AAGAoD,IAAAA,YAAYa,gBAAcD;KACvBA;;;;;;;;iFAIP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoClC,YAAAA,KAApC,QAAoCA,KAApC,EAA2CqB,OAA3C,QAA2CA,OAA3C;AACQ1C,YAAAA,QADR,GACmBrB,mBADnB;;AAAA,gBAEOqB,QAFP;AAAA;AAAA;AAAA;;AAAA,kBAGU,IAAIC,KAAJ,CAAU,4BAAV,CAHV;;AAAA;AAAA;AAAA;AAAA,mBAOoCD,SAASiG,gBAAT,CAA0B5E,KAA1B,CAPpC;;AAAA;AAOU6E,YAAAA,iBAPV;oBAQY9F,oCAAAA,SAAW8F;AARvB;AAAA;;AAAA;AAAA;AAAA;oBAUYzE,MAAM;oBACNpB,oCAAAA;;AAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAmBO,IAAM8F;oFAAc,iBAAOzD,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBnD,YAAAA,WADiB,GACYmD,OADZ,CACjBnD,WADiB,EACDwF,QADC,iCACYrC,OADZ;;AAAA,iBAErBY,iBAAiB/D,YAFI;AAAA;AAAA;AAAA;;AAAA,uBAGW8C,QAAQ9C,YAHnB,EAGf+C,UAHe,YAGfA,UAHe,EAGHC,SAHG,YAGHA,SAHG;AAKjB4C,YAAAA,QALiB,gBAMlBJ,QANkB;AAOrBxC,cAAAA,WAAAA;AAPqB;AAAA,6CAUhB+C,cAAYH,UAAS7C,WAVL;;AAAA;AAYnBf,YAAAA,OAZmB,gBAYJwD,QAZI;AAAA,6CAalBb,gCAAqB3C,QAbH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;kBAAd4E;;;;;;;;;;0FAgBb,kBACEzD,OADF,EAEEoD,WAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIsBA,yBACfM,kCAAkC1D,UAClCA,SANP;;AAAA;AAIQrB,YAAAA,KAJR;AAAA,8CAQSgF,mBAAmB;AAAEhF,cAAAA,OAAAA,KAAF;AAASqB,cAAAA,SAAAA;AAAT,cAR5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAWO,mCAAmCA,SAAkC;SACnEsD,4BAA0BtD,SAASyD;;;;;;;;;;0FC/E5C,iBACEzD,OADF,EAEEoD,WAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIsBA,yBACfM,kCAAkC1D,UAClCA,SANP;;AAAA;AAIQrB,YAAAA,KAJR;AAAA,6CAQSiF,iCAAiC;AAAEjF,cAAAA,OAAAA,KAAF;AAASqB,cAAAA,SAAAA;AAAT,cAR1C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;4EAWA,kBAA2BnB,OAA3B,EAAoEe,UAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AACQyB,YAAAA,WADR,GACsB,IAAIC,sBAAJ,CAAgB,QAAhB,EAA0B1B,UAA1B,CADtB;AAAA,8CAESyB,YAAYE,SAAZ,cACF1C,OADE;AAELgF,cAAAA,SAAS5C,kBAAWuB,yBAAY3D,QAAQgF,SAFnC;AAGLC,cAAAA,QAAQ7C,kBAAWuB,yBAAY3D,QAAQiF;AAHlC,eAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA,8BAAA;AAAA;AAAA;;;sGAA4C9D;;;;;;;AAClCnD,YAAAA,cAA6BmD,QAA7BnD,aAAgBwF,yCAAarC;;iBACjCY,iBAAiB/D;;;;;uBACe8C,QAAQ9C,cAAlC+C,sBAAAA,YAAYC,qBAAAA;AAEdhB,YAAAA,uBACDwD;AACHxC,cAAAA,WAAAA;;8CAEK+C,cAAY/D,SAASe;;;8CAIvB4B,gCAAqBxB;;;;;;;;;;;;;;;;;+FAG9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkDrB,YAAAA,KAAlD,QAAkDA,KAAlD,EAAyDqB,OAAzD,QAAyDA,OAAzD;AACQ1C,YAAAA,QADR,GACmBrB,mBADnB;;AAAA,gBAEOqB,QAFP;AAAA;AAAA;AAAA;;AAAA,kBAGU,IAAIC,KAAJ,CAAU,4BAAV,CAHV;;AAAA;AAAA;AAAA;AAAA,mBAOoCD,SAASyG,8BAAT,CAAwCpF,KAAxC,CAPpC;;AAAA;AAOU6E,YAAAA,iBAPV;oBASY9F,oCAAAA,SAAW8F;AATvB;AAAA;;AAAA;AAAA;AAAA;oBAWYzE,MAAM;oBACNpB,oCAAAA;;AAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAgBO,iDACLqC,SACA;SACOsD,4BAA0BtD,SAASgE;;;IC/D/BC,cAAc,SAAdA,WAAc,CAAC5G,WAAD,EAA8B;MACnDpB,qBAAqB;SAClBmB,aAAaC;;;;MAGhB,OAAOvB,MAAP,KAAkB,QAAW;SAC1BoI,4BAAqBpI;QACpBqI,UAAUnH,SAASoH,aAAT,CAAuB,eAAvB;YACR/G,cAAcA;aACbgH,KAAKC,YAAYH;;QACpBI,YAAY,SAAZA,SAAY,CAACC,EAAD,EAAuB;UACnCA,GAAGC,GAAH,KAAW,UAAU;iBACdC,oBAAoB,WAAWH;gBAChCI;;;;aAGHC,iBAAiB,WAAWL;;;AAOlC,IAAMM,wBAAwB,SAAxBA,qBAAwB,CAACxH,WAAD;AAAA,SAA8B4G,YAAY5G,YAA1C;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}