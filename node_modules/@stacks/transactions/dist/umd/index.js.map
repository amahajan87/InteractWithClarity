{"version":3,"file":"index.js","mappings":"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","sources":["webpack://StacksTransactions/webpack/universalModuleDefinition","webpack://StacksTransactions/webpack/runtime/create fake namespace object","webpack://StacksTransactions/../../node_modules/@noble/hashes/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/utils.js","webpack://StacksTransactions/../../node_modules/base-x/src/index.js","webpack://StacksTransactions/../../node_modules/c32check/lib/address.js","webpack://StacksTransactions/../../node_modules/c32check/lib/base58check.js","webpack://StacksTransactions/../../node_modules/c32check/lib/checksum.js","webpack://StacksTransactions/../../node_modules/c32check/lib/encoding.js","webpack://StacksTransactions/../../node_modules/c32check/lib/index.js","webpack://StacksTransactions/../../node_modules/cross-fetch/dist/browser-polyfill.js","webpack://StacksTransactions/../../node_modules/lodash.clonedeep/index.js","webpack://StacksTransactions/webpack/bootstrap","webpack://StacksTransactions/webpack/runtime/compat get default export","webpack://StacksTransactions/webpack/runtime/define property getters","webpack://StacksTransactions/webpack/runtime/global","webpack://StacksTransactions/webpack/runtime/hasOwnProperty shorthand","webpack://StacksTransactions/webpack/runtime/make namespace object","webpack://StacksTransactions/webpack/runtime/node module decorator","webpack://StacksTransactions/../common/dist/esm/utils.js","webpack://StacksTransactions/../common/dist/esm/buffer.js","webpack://StacksTransactions/./src/constants.ts","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_assert.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/utils.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_sha2.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/ripemd160.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha256.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/_u64.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/sha512.js","webpack://StacksTransactions/../../node_modules/@noble/secp256k1/lib/esm/index.js","webpack://StacksTransactions/../../node_modules/@noble/hashes/esm/hmac.js","webpack://StacksTransactions/../common/dist/esm/constants.js","webpack://StacksTransactions/./src/common.ts","webpack://StacksTransactions/./src/keys.ts","webpack://StacksTransactions/../common/dist/esm/signatures.js","webpack://StacksTransactions/../common/dist/esm/keys.js","webpack://StacksTransactions/./src/postcondition-types.ts","webpack://StacksTransactions/./src/clarity/constants.ts","webpack://StacksTransactions/./src/clarity/types/intCV.ts","webpack://StacksTransactions/./src/clarity/types/bufferCV.ts","webpack://StacksTransactions/./src/clarity/types/booleanCV.ts","webpack://StacksTransactions/./src/clarity/types/principalCV.ts","webpack://StacksTransactions/./src/clarity/types/responseCV.ts","webpack://StacksTransactions/./src/clarity/types/optionalCV.ts","webpack://StacksTransactions/./src/clarity/types/listCV.ts","webpack://StacksTransactions/./src/clarity/types/tupleCV.ts","webpack://StacksTransactions/./src/bytesReader.ts","webpack://StacksTransactions/./src/errors.ts","webpack://StacksTransactions/./src/clarity/types/stringCV.ts","webpack://StacksTransactions/./src/clarity/deserialize.ts","webpack://StacksTransactions/./src/payload.ts","webpack://StacksTransactions/./src/signature.ts","webpack://StacksTransactions/./src/types.ts","webpack://StacksTransactions/./src/clarity/serialize.ts","webpack://StacksTransactions/./src/utils.ts","webpack://StacksTransactions/./src/authorization.ts","webpack://StacksTransactions/./src/transaction.ts","webpack://StacksTransactions/./src/postcondition.ts","webpack://StacksTransactions/./src/clarity/clarityValue.ts","webpack://StacksTransactions/../network/dist/esm/fetch.js","webpack://StacksTransactions/../network/dist/esm/network.js","webpack://StacksTransactions/./src/contract-abi.ts","webpack://StacksTransactions/./src/signer.ts","webpack://StacksTransactions/./src/builders.ts","webpack://StacksTransactions/./src/structuredDataSignature.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StacksTransactions\"] = factory();\n\telse\n\t\troot[\"StacksTransactions\"] = factory();\n})(this, () => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { Logger } from './logger';\nexport const BLOCKSTACK_HANDLER = 'blockstack';\nexport function nextYear() {\n    return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\nexport function nextMonth() {\n    return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\nexport function nextHour() {\n    return new Date(new Date().setHours(new Date().getHours() + 1));\n}\nexport function megabytesToBytes(megabytes) {\n    if (!Number.isFinite(megabytes)) {\n        return 0;\n    }\n    return Math.floor(megabytes * 1024 * 1024);\n}\nexport function getAesCbcOutputLength(inputByteLength) {\n    const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n    return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n    const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n    return encodedLength;\n}\nexport function updateQueryStringParameter(uri, key, value) {\n    const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n    const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n    if (uri.match(re)) {\n        return uri.replace(re, `$1${key}=${value}$2`);\n    }\n    else {\n        return `${uri}${separator}${key}=${value}`;\n    }\n}\nexport function isLaterVersion(v1, v2) {\n    if (v1 === undefined || v1 === '') {\n        v1 = '0.0.0';\n    }\n    if (v2 === undefined || v1 === '') {\n        v2 = '0.0.0';\n    }\n    const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n    const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n    for (let index = 0; index < v2.length; index++) {\n        if (index >= v1.length) {\n            v2tuple.push(0);\n        }\n        if (v1tuple[index] < v2tuple[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function makeUUID4() {\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n        d += performance.now();\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\nexport function isSameOriginAbsoluteUrl(uri1, uri2) {\n    try {\n        const parsedUri1 = new URL(uri1);\n        const parsedUri2 = new URL(uri2);\n        const port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n        const port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n        const match = {\n            scheme: parsedUri1.protocol === parsedUri2.protocol,\n            hostname: parsedUri1.hostname === parsedUri2.hostname,\n            port: port1 === port2,\n            absolute: (uri1.includes('http://') || uri1.includes('https://')) &&\n                (uri2.includes('http://') || uri2.includes('https://')),\n        };\n        return match.scheme && match.hostname && match.port && match.absolute;\n    }\n    catch (error) {\n        console.log(error);\n        console.log('Parsing error in same URL origin check');\n        return false;\n    }\n}\nexport function getGlobalScope() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n    if (usageDesc) {\n        return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n    else {\n        return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n}\nexport function getGlobalObject(name, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope = undefined;\n    try {\n        globalScope = getGlobalScope();\n        if (globalScope) {\n            const obj = globalScope[name];\n            if (obj) {\n                return obj;\n            }\n        }\n    }\n    catch (error) {\n        Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n    }\n    if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n    }\n    if (returnEmptyObject) {\n        return {};\n    }\n    return undefined;\n}\nexport function getGlobalObjects(names, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope;\n    try {\n        globalScope = getGlobalScope();\n    }\n    catch (error) {\n        Logger.error(`Error getting global scope: ${error}`);\n        if (throwIfUnavailable) {\n            const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n            Logger.error(errMsg);\n            throw errMsg;\n        }\n        else if (returnEmptyObject) {\n            globalScope = {};\n        }\n    }\n    const result = {};\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        try {\n            if (globalScope) {\n                const obj = globalScope[name];\n                if (obj) {\n                    result[name] = obj;\n                }\n                else if (throwIfUnavailable) {\n                    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                    Logger.error(errMsg);\n                    throw new Error(errMsg);\n                }\n                else if (returnEmptyObject) {\n                    result[name] = {};\n                }\n            }\n        }\n        catch (error) {\n            if (throwIfUnavailable) {\n                const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                Logger.error(errMsg);\n                throw new Error(errMsg);\n            }\n        }\n    }\n    return result;\n}\nexport function intToBytes(value, signed, byteLength) {\n    return bigIntToBytes(intToBigInt(value, signed), byteLength);\n}\nexport function intToBigInt(value, signed) {\n    let parsedValue = value;\n    if (typeof parsedValue === 'number') {\n        if (!Number.isInteger(parsedValue)) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n        }\n        return BigInt(parsedValue);\n    }\n    if (typeof parsedValue === 'string') {\n        if (parsedValue.toLowerCase().startsWith('0x')) {\n            let hex = parsedValue.slice(2);\n            hex = hex.padStart(hex.length + (hex.length % 2), '0');\n            parsedValue = hexToBytes(hex);\n        }\n        else {\n            try {\n                return BigInt(parsedValue);\n            }\n            catch (error) {\n                if (error instanceof SyntaxError) {\n                    throw new RangeError(`Invalid value. String integer '${parsedValue}' is not finite.`);\n                }\n            }\n        }\n    }\n    if (typeof parsedValue === 'bigint') {\n        return parsedValue;\n    }\n    if (parsedValue instanceof Uint8Array) {\n        if (signed) {\n            const bn = fromTwos(BigInt(`0x${bytesToHex(parsedValue)}`), BigInt(parsedValue.byteLength * 8));\n            return BigInt(bn.toString());\n        }\n        else {\n            return BigInt(`0x${bytesToHex(parsedValue)}`);\n        }\n    }\n    if (parsedValue != null &&\n        typeof parsedValue === 'object' &&\n        parsedValue.constructor.name === 'BN') {\n        return BigInt(parsedValue.toString());\n    }\n    throw new TypeError(`Invalid value type. Must be a number, bigint, integer-string, hex-string, or Uint8Array.`);\n}\nexport function with0x(value) {\n    return !value.startsWith('0x') ? `0x${value}` : value;\n}\nexport function hexToBigInt(hex) {\n    if (typeof hex !== 'string')\n        throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n    return BigInt(`0x${hex}`);\n}\nexport function intToHex(integer, lengthBytes = 8) {\n    const value = typeof integer === 'bigint' ? integer : intToBigInt(integer, false);\n    return value.toString(16).padStart(lengthBytes * 2, '0');\n}\nexport function hexToInt(hex) {\n    return parseInt(hex, 16);\n}\nexport function bigIntToBytes(value, length = 16) {\n    const hex = intToHex(value, length);\n    return hexToBytes(hex);\n}\nexport function toTwos(value, width) {\n    if (value < -(BigInt(1) << (width - BigInt(1))) ||\n        (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value) {\n        throw `Unable to represent integer in width: ${width}`;\n    }\n    if (value >= BigInt(0)) {\n        return BigInt(value);\n    }\n    return value + (BigInt(1) << width);\n}\nfunction nthBit(value, n) {\n    return value & (BigInt(1) << n);\n}\nexport function fromTwos(value, width) {\n    if (nthBit(value, width - BigInt(1))) {\n        return value - (BigInt(1) << width);\n    }\n    return value;\n}\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (const u of uint8a) {\n        hex += hexes[u];\n    }\n    return hex;\n}\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n    }\n    const paddedHex = hex.length % 2 ? `0${hex}` : hex;\n    const array = new Uint8Array(paddedHex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = paddedHex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexport function utf8ToBytes(str) {\n    return new TextEncoder().encode(str);\n}\nexport function bytesToUtf8(arr) {\n    return new TextDecoder().decode(arr);\n}\nexport function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; i++) {\n        byteArray.push(str.charCodeAt(i) & 0xff);\n    }\n    return new Uint8Array(byteArray);\n}\nexport function bytesToAscii(arr) {\n    return String.fromCharCode.apply(null, arr);\n}\nfunction isNotOctet(octet) {\n    return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\nexport function octetsToBytes(numbers) {\n    if (numbers.some(isNotOctet))\n        throw new Error('Some values are invalid bytes.');\n    return new Uint8Array(numbers);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        return utf8ToBytes(data);\n    if (data instanceof Uint8Array)\n        return data;\n    throw new TypeError(`Expected input type is (Uint8Array | string) but got (${typeof data})`);\n}\nexport function concatBytes(...arrays) {\n    if (!arrays.every(a => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function concatArray(elements) {\n    return concatBytes(...elements.map(e => {\n        if (typeof e === 'number')\n            return octetsToBytes([e]);\n        if (e instanceof Array)\n            return octetsToBytes(e);\n        return e;\n    }));\n}\nexport function isInstance(object, type) {\n    var _a;\n    return (object instanceof type ||\n        (((_a = object === null || object === void 0 ? void 0 : object.constructor) === null || _a === void 0 ? void 0 : _a.name) != null && object.constructor.name === type.name));\n}\n//# sourceMappingURL=utils.js.map","export function equals(a, b) {\n    if (a.byteLength !== b.byteLength)\n        return false;\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexport function alloc(length, value) {\n    const a = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        a[i] = value;\n    }\n    return a;\n}\nexport function readUInt16BE(source, offset) {\n    return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(source, value, offset) {\n    source[offset + 0] = value >>> 8;\n    source[offset + 1] = value >>> 0;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset) {\n    destination[offset] = value;\n}\nexport function readUInt16LE(source, offset) {\n    return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\nexport function writeUInt16LE(destination, value, offset) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24 +\n        source[offset + 1] * 2 ** 16 +\n        source[offset + 2] * 2 ** 8 +\n        source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset) {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n}\nexport function readUInt32LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0) |\n        ((source[offset + 2] << 16) >>> 0) |\n        ((source[offset + 3] << 24) >>> 0));\n}\nexport function writeUInt32LE(destination, value, offset) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    value >>>= 8;\n    destination[offset + 2] = value & 255;\n    value >>>= 8;\n    destination[offset + 3] = value & 255;\n}\n//# sourceMappingURL=buffer.js.map","/**\n * Unsigned 32-bit integer\n */\nenum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst CLARITY_INT_BYTE_SIZE = 16;\nconst COINBASE_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\n\nenum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\ntype WhenMessageTypeMap<T> = Record<StacksMessageType, T>;\n\nexport function whenMessageType(messageType: StacksMessageType) {\n  return <T>(messageTypeMap: WhenMessageTypeMap<T>): T => messageTypeMap[messageType];\n}\n\nenum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nenum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\nenum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\nenum PostConditionMode {\n  Allow = 0x01,\n  Deny = 0x02,\n}\n\nenum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum AuthType {\n  Standard = 0x04,\n  Sponsored = 0x05,\n}\n\nenum AddressHashMode {\n  // serialization modes for public keys to addresses.\n  // We support four different modes due to legacy compatibility with Stacks v1 addresses:\n  /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** MultiSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** SingleSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\ntype SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\ntype MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\nenum AddressVersion {\n  MainnetSingleSig = 22,\n  MainnetMultiSig = 20,\n  TestnetSingleSig = 26,\n  TestnetMultiSig = 21,\n}\n\nenum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\nenum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\nenum NonFungibleConditionCode {\n  Sends = 0x10,\n  DoesNotSend = 0x11,\n}\n\nenum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\nenum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n\nexport {\n  MAX_STRING_LENGTH_BYTES,\n  CLARITY_INT_SIZE,\n  CLARITY_INT_BYTE_SIZE,\n  COINBASE_LENGTH_BYTES as COINBASE_BYTES_LENGTH,\n  DEFAULT_CHAIN_ID,\n  DEFAULT_TRANSACTION_VERSION,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  DEFAULT_CORE_NODE_API_URL,\n  ChainID,\n  StacksMessageType,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  PostConditionMode,\n  PostConditionType,\n  PostConditionPrincipalID,\n  AuthType,\n  AddressHashMode,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  AddressVersion,\n  PubKeyEncoding,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  AssetType,\n  TxRejectedReason,\n};\n","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","export var ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Testnet\"] = 2147483648] = \"Testnet\";\n    ChainID[ChainID[\"Mainnet\"] = 1] = \"Mainnet\";\n})(ChainID || (ChainID = {}));\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport const PRIVATE_KEY_COMPRESSED_LENGTH = 33;\nexport const PRIVATE_KEY_UNCOMPRESSED_LENGTH = 32;\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n//# sourceMappingURL=constants.js.map","import {\n  AddressHashMode,\n  AddressVersion,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160);\n}\n","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey as nobleGetPublicKey,\n  Point,\n  Signature,\n  signSync,\n  utils,\n} from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  concatArray,\n  hexToBigInt,\n  hexToBytes,\n  intToHex,\n  parseRecoverableSignatureVrs,\n  privateKeyToBytes,\n  PRIVATE_KEY_COMPRESSED_LENGTH,\n  signatureRsvToVrs,\n  signatureVrsToRsv,\n} from '@stacks/common';\nimport { c32address } from 'c32check';\nimport { BytesReader } from './bytesReader';\nimport {\n  addressFromVersionHash,\n  addressHashModeToVersion,\n  addressToString,\n  createMessageSignature,\n  MessageSignature,\n} from './common';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n} from './constants';\nimport { hash160, hashP2PKH } from './utils';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Uint8Array;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key bytes or hex string */\n  privateKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key bytes or hex string */\n  publicKey: string | Uint8Array,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(hexToBytes(publicKey)));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: hexToBytes(key),\n  };\n}\n\nexport function publicKeyFromSignatureVrs(\n  messageHash: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  const parsedSignature = parseRecoverableSignatureVrs(messageSignature.data);\n  const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n  const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n  const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n  return point.toHex(compressed);\n}\n\nexport function publicKeyFromSignatureRsv(\n  messageHash: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  return publicKeyFromSignatureVrs(\n    messageHash,\n    { ...messageSignature, data: signatureRsvToVrs(messageSignature.data) },\n    pubKeyEncoding\n  );\n}\n\nexport function publicKeyFromBytes(data: Uint8Array): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !bytesToHex(key.data).startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return bytesToHex(key.data);\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Uint8Array {\n  return key.data.slice();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Uint8Array): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const publicKey = nobleGetPublicKey(privKey.data.slice(0, 32), privKey.compressed);\n  return createStacksPublicKey(bytesToHex(publicKey));\n}\n\nexport function compressPublicKey(publicKey: string | Uint8Array): StacksPublicKey {\n  const hex = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n  const compressed = Point.fromHex(hex).toHex(true);\n  return createStacksPublicKey(compressed);\n}\n\nexport function deserializePublicKey(bytesReader: BytesReader): StacksPublicKey {\n  const fieldId = bytesReader.readUInt8();\n  const keyLength =\n    fieldId !== 4 ? COMPRESSED_PUBKEY_LENGTH_BYTES : UNCOMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBytes(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n\nexport interface StacksPrivateKey {\n  // \"compressed\" private key is a misnomer: https://web.archive.org/web/20220131144208/https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch04.html#comp_priv\n  // it actually means: should public keys be generated as \"compressed\" or \"uncompressed\" from this private key\n  compressed: boolean;\n  data: Uint8Array;\n}\n\nexport function createStacksPrivateKey(key: string | Uint8Array): StacksPrivateKey {\n  const data = privateKeyToBytes(key);\n  const compressed = data.length == PRIVATE_KEY_COMPRESSED_LENGTH;\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(): StacksPrivateKey {\n  return createStacksPrivateKey(utils.randomPrivateKey());\n}\n\n/**\n * @deprecated The Clarity compatible {@link signMessageHashRsv} is preferred, but differs in signature format\n * @returns A recoverable signature (in VRS order)\n */\nexport function signWithKey(privateKey: StacksPrivateKey, messageHash: string): MessageSignature {\n  const [rawSignature, recoveryId] = signSync(messageHash, privateKey.data.slice(0, 32), {\n    canonical: true,\n    recovered: true,\n  });\n  if (recoveryId == null) {\n    throw new Error('No signature recoveryId received');\n  }\n  const recoveryIdHex = intToHex(recoveryId, 1);\n  const recoverableSignatureString = recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex(); // V + RS\n  return createMessageSignature(recoverableSignatureString);\n}\n\n/**\n * Signs a message using a private key. The resulting signature along with the\n * original message can be verified using {@link verifyMessageSignatureRsv}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signMessageHashRsv({\n  messageHash,\n  privateKey,\n}: {\n  messageHash: string;\n  privateKey: StacksPrivateKey;\n}): MessageSignature {\n  const messageSignature = signWithKey(privateKey, messageHash);\n  return { ...messageSignature, data: signatureVrsToRsv(messageSignature.data) };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return bytesToHex(privateKey.data);\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, bytesToHex(hash160(publicKey.data)));\n}\n","import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n    if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n        throw new Error('Invalid signature');\n    }\n    const recoveryIdHex = signature.slice(0, 2);\n    const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n    const s = signature.slice(2 + COORDINATE_BYTES * 2);\n    return {\n        recoveryId: hexToInt(recoveryIdHex),\n        r,\n        s,\n    };\n}\nexport function signatureVrsToRsv(signature) {\n    return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n    return signature.slice(-2) + signature.slice(0, -2);\n}\n//# sourceMappingURL=signatures.js.map","import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n    const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n    if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n        throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n    }\n    if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n        throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n    }\n    return privateKeyBuffer;\n}\n//# sourceMappingURL=keys.js.map","import {\n  FungibleConditionCode,\n  MAX_STRING_LENGTH_BYTES,\n  NonFungibleConditionCode,\n  PostConditionPrincipalID,\n  PostConditionType,\n  StacksMessageType,\n} from './constants';\nimport { c32addressDecode } from 'c32check';\nimport { Address } from './common';\nimport { ClarityValue } from './clarity';\nimport { exceedsMaxLengthBytes } from './utils';\n\nexport interface StandardPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Standard;\n  readonly address: Address;\n}\n\nexport interface ContractPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Contract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nexport interface LengthPrefixedString {\n  readonly type: StacksMessageType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\nexport interface AssetInfo {\n  readonly type: StacksMessageType.AssetInfo;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly assetName: LengthPrefixedString;\n}\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n  readonly assetInfo: AssetInfo;\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function parseAssetInfoString(id: string): AssetInfo {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n  return assetInfo;\n}\n\nexport function createLPString(content: string): LengthPrefixedString;\nexport function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedString {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n  }\n  return {\n    type: StacksMessageType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\nexport function createAssetInfo(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\nexport function createAddress(c32AddressString: string): Address {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksMessageType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipal | ContractPrincipal {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipal {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\nexport function createStandardPrincipal(addressString: string): StandardPrincipal {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Standard,\n    address: addr,\n  };\n}\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport type PostConditionPrincipal = StandardPrincipal | ContractPrincipal;\n","/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 0, value: 100n }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst intCV = (value: IntegerType): IntCV => {\n  const bigInt = intToBigInt(value, true);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 1, value: 100n }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value, false);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n","import { utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\ninterface BufferCV {\n  readonly type: ClarityType.Buffer;\n  readonly buffer: Uint8Array;\n}\n\n/**\n * Converts a Uint8Array to a BufferCV clarity type\n *\n * @param {Uint8Array} buffer value to be converted to clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCV } from '@stacks/transactions';\n *\n *  const buffer = utf8ToBytes('this is a test');\n *  const buf = bufferCV(buffer);\n *  // { type: 2, buffer: <Uint8Array 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst bufferCV = (buffer: Uint8Array): BufferCV => {\n  if (buffer.length > 1_000_000) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, buffer };\n};\n\n/**\n * Converts a string to BufferCV clarity type\n *\n * @param {str} string input to be converted to bufferCV clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCVFromString } from '@stacks/transactions';\n *\n *  const str = 'this is a test';\n *  const buf = bufferCVFromString(str);\n *  // { type: 2, buffer: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n *```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst bufferCVFromString = (str: string): BufferCV => bufferCV(utf8ToBytes(str));\n\nexport { BufferCV, bufferCV, bufferCVFromString };\n","import { ClarityType } from '../constants';\n\ntype BooleanCV = TrueCV | FalseCV;\n\ninterface TrueCV {\n  type: ClarityType.BoolTrue;\n}\n\ninterface FalseCV {\n  type: ClarityType.BoolFalse;\n}\n\n/**\n * Converts true to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { trueCV } from '@stacks/transactions';\n *\n *  const trueCV = trueCV();\n *  // { type: 3 }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\n\n/**\n * Converts false to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { falseCV } from '@stacks/transactions';\n *\n *  const falseCV = falseCV();\n *  // { type: 4 }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\nexport { BooleanCV, TrueCV, FalseCV, trueCV, falseCV };\n","import { LengthPrefixedString, createAddress, createLPString } from '../../postcondition-types';\nimport { Address, addressToString } from '../../common';\nimport { ClarityType } from '../constants';\nimport { utf8ToBytes } from '@stacks/common';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n *\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n *\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n\n * @param {contractName} string containing contract name\n *\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n *\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n *\n * @param {contractName} contract name of type LengthPrefixedString\n *\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ntype ResponseCV = ResponseErrorCV | ResponseOkCV;\n\ninterface ResponseErrorCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseErr;\n  readonly value: T;\n}\n\ninterface ResponseOkCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.ResponseOk;\n  readonly value: T;\n}\n\n/**\n * Converts ClarityValue to responseErrorCV\n *\n * @param {value} ClarityValue value to be converted to responseErrorCV clarity type\n *\n * @returns {responseErrorCV} returns instance of type responseErrorCV\n *\n * @example\n * ```\n *  import { responseErrorCV, intCV } from '@stacks/transactions';\n *\n *  const respErrorCV = responseErrorCV(intCV(1));\n *\n *  // { type: 8, value: { type: 0, value: 1n } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction responseErrorCV<T extends ClarityValue = ClarityValue>(value: T): ResponseErrorCV<T> {\n  return { type: ClarityType.ResponseErr, value };\n}\n\n/**\n * Converts ClarityValue to ResponseOkCV\n *\n * @param {value} ClarityValue value to be converted to ResponseOkCV clarity type\n *\n * @returns {ResponseOkCV} returns instance of type ResponseOkCV\n *\n * @example\n * ```\n *  import { responseOkCV, intCV } from '@stacks/transactions';\n *\n *  const respOKCV = responseOkCV(intCV(1));\n *\n *  // { type: 7, value: { type: 0, value: 1n } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction responseOkCV<T extends ClarityValue = ClarityValue>(value: T): ResponseOkCV<T> {\n  return { type: ClarityType.ResponseOk, value };\n}\n\nexport { ResponseCV, ResponseErrorCV, ResponseOkCV, responseErrorCV, responseOkCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\ntype OptionalCV<T extends ClarityValue = ClarityValue> = NoneCV | SomeCV<T>;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: T;\n}\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 9 }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 10, value: { type: 3 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nfunction optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n}\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ninterface ListCV<T extends ClarityValue = ClarityValue> {\n  type: ClarityType.List;\n  list: T[];\n}\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue>values: T[]} list of  ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} returns instance of type ListCV<T>\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 11, list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n","import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\n\ntype TupleData<T extends ClarityValue = ClarityValue> = { [key: string]: T };\n\ninterface TupleCV<T extends TupleData = TupleData> {\n  type: ClarityType.Tuple;\n  data: T;\n}\n\n/**\n * Create tuple of clarity values\n *\n * @param {tupleData} tuple value to be converted to tuple of clarity types\n *\n * @returns {TupleCV} returns instance of type clarity tuple\n *\n * @example\n * ```\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\n *\n *  const tuple = tupleCV({\n *    c: trueCV(),\n *    b: falseCV(),\n *    a: trueCV(),\n *  });\n *  // { type: 12, data: { c: { type: 3 }, b: { type: 4 }, a: { type: 3 } } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction tupleCV<T extends ClarityValue = ClarityValue>(data: TupleData<T>): TupleCV<TupleData<T>> {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, data };\n}\n\nexport { TupleCV, tupleCV };\n","import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(arr: Uint8Array) {\n    this.source = arr;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n","export class SerializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class DeserializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class NotImplementedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SigningError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nexport class VerificationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n","import { ClarityType } from '../constants';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\n/**\n *  @ignore\n */\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringAsciiCV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n","import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BytesReader as BytesReader } from '../bytesReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nimport { bytesToAscii, bytesToUtf8, hexToBytes } from '@stacks/common';\n\n/**\n * Deserializes clarity value to clarity type\n *\n * @param {value} Uint8Array | string value to be converted to clarity type\n **\n * @returns {ClarityType} returns the clarity type instance\n *\n * @example\n * ```\n *  import { intCV, serializeCV, deserializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n *\n *  const deserialized = deserializeCV(serialized);\n *  // { type: 0, value: 100n }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nexport default function deserializeCV<T extends ClarityValue = ClarityValue>(\n  serializedClarityValue: BytesReader | Uint8Array | string\n): T {\n  let bytesReader: BytesReader;\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bytesReader = new BytesReader(\n      hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue)\n    );\n  } else if (serializedClarityValue instanceof Uint8Array) {\n    bytesReader = new BytesReader(serializedClarityValue);\n  } else {\n    bytesReader = serializedClarityValue;\n  }\n  const type = bytesReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.UInt:\n      return uintCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityType.Buffer:\n      const bufferLength = bytesReader.readUInt32BE();\n      return bufferCV(bytesReader.readBytes(bufferLength)) as T;\n\n    case ClarityType.BoolTrue:\n      return trueCV() as T;\n\n    case ClarityType.BoolFalse:\n      return falseCV() as T;\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bytesReader);\n      return standardPrincipalCVFromAddress(sAddress) as T;\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bytesReader);\n      const contractName = deserializeLPString(bytesReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName) as T;\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.OptionalNone:\n      return noneCV() as T;\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityType.List:\n      const listLength = bytesReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bytesReader));\n      }\n      return listCV(listContents) as T;\n\n    case ClarityType.Tuple:\n      const tupleLength = bytesReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bytesReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bytesReader);\n      }\n      return tupleCV(tupleContents) as T;\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bytesReader.readUInt32BE();\n      const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n      return stringAsciiCV(asciiStr) as T;\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bytesReader.readUInt32BE();\n      const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n      return stringUtf8CV(utf8Str) as T;\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import { concatArray, IntegerType, intToBigInt, intToBytes, writeUInt32BE } from '@stacks/common';\nimport { COINBASE_BYTES_LENGTH, PayloadType, StacksMessageType } from './constants';\n\nimport {\n  MemoString,\n  createMemoString,\n  serializeStacksMessage,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  codeBodyString,\n} from './types';\nimport { createAddress, LengthPrefixedString, createLPString } from './postcondition-types';\nimport { Address } from './common';\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity/';\n\nimport { BytesReader } from './bytesReader';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload;\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: bigint;\n  readonly memo: MemoString;\n}\n\nexport type PayloadInput =\n  | (TokenTransferPayload | (Omit<TokenTransferPayload, 'amount'> & { amount: IntegerType }))\n  | ContractCallPayload\n  | SmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload;\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: IntegerType,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount: intToBigInt(amount, false),\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString\n): SmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBytes: Uint8Array;\n}\n\nexport function createCoinbasePayload(coinbaseBytes: Uint8Array): CoinbasePayload {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase length must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.Coinbase,\n    coinbaseBytes: coinbaseBytes,\n  };\n}\n\nexport function serializePayload(payload: PayloadInput): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bytesArray.push(serializeCV(payload.recipient));\n      bytesArray.push(intToBytes(payload.amount, false, 8));\n      bytesArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bytesArray.push(serializeStacksMessage(payload.contractAddress));\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = new Uint8Array(4);\n      writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n      bytesArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bytesArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bytesArray.push(serializeStacksMessage(payload.contractName));\n      bytesArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePayload(bytesReader: BytesReader): Payload {\n  const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bytesReader) as PrincipalCV;\n      const amount = intToBigInt(bytesReader.readBytes(8), false);\n      const memo = deserializeMemoString(bytesReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bytesReader);\n      const contractCallName = deserializeLPString(bytesReader);\n      const functionName = deserializeLPString(bytesReader);\n      const functionArgs: ClarityValue[] = [];\n      const numberOfArgs = bytesReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bytesReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody);\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase:\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      return createCoinbasePayload(coinbaseBytes);\n  }\n}\n","import { BytesReader } from './bytesReader';\nimport { DeserializationError } from './errors';\nimport { PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType } from './constants';\nimport {\n  compressPublicKey,\n  deserializePublicKey,\n  serializePublicKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { createMessageSignature, MessageSignature } from './common';\n\n// @ts-ignore\nimport { bytesToHex, concatArray, hexToBytes } from '@stacks/common';\n\nexport enum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport function deserializeMessageSignature(bytesReader: BytesReader): MessageSignature {\n  return createMessageSignature(\n    bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  );\n}\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    pubKeyEncoding,\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function deserializeTransactionAuthField(bytesReader: BytesReader): TransactionAuthField {\n  const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Uint8Array {\n  return hexToBytes(messageSignature.data);\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Uint8Array {\n  const bytesArray = [];\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.PublicKeyCompressed);\n        bytesArray.push(serializePublicKey(field.contents));\n      } else {\n        bytesArray.push(AuthFieldType.PublicKeyUncompressed);\n        bytesArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n      }\n      break;\n    case StacksMessageType.MessageSignature:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bytesArray.push(AuthFieldType.SignatureCompressed);\n      } else {\n        bytesArray.push(AuthFieldType.SignatureUncompressed);\n      }\n      bytesArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n","import {\n  bytesToHex,\n  bytesToUtf8,\n  concatArray,\n  hexToBytes,\n  hexToInt,\n  intToBytes,\n  intToHex,\n  utf8ToBytes,\n} from '@stacks/common';\nimport {\n  MEMO_MAX_LENGTH_BYTES,\n  AddressHashMode,\n  AddressVersion,\n  TransactionVersion,\n  StacksMessageType,\n  PostConditionPrincipalID,\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n} from './constants';\n\nimport { StacksPublicKey, serializePublicKey, deserializePublicKey, isCompressed } from './keys';\n\nimport {\n  exceedsMaxLengthBytes,\n  hashP2PKH,\n  rightPadHexToLength,\n  hashP2SH,\n  hashP2WSH,\n  hashP2WPKH,\n} from './utils';\n\nimport { BytesReader } from './bytesReader';\nimport {\n  PostCondition,\n  StandardPrincipal,\n  ContractPrincipal,\n  PostConditionPrincipal,\n  LengthPrefixedString,\n  AssetInfo,\n  createLPString,\n} from './postcondition-types';\nimport { Payload, deserializePayload, serializePayload } from './payload';\nimport { DeserializationError } from './errors';\nimport {\n  deserializeTransactionAuthField,\n  deserializeMessageSignature,\n  serializeMessageSignature,\n  serializeTransactionAuthField,\n  TransactionAuthField,\n} from './signature';\nimport {\n  MessageSignature,\n  Address,\n  addressHashModeToVersion,\n  addressFromVersionHash,\n} from './common';\nimport { deserializeCV, serializeCV } from './clarity';\nexport type StacksMessage =\n  | Address\n  | PostConditionPrincipal\n  | LengthPrefixedString\n  | LengthPrefixedList\n  | Payload\n  | MemoString\n  | AssetInfo\n  | PostCondition\n  | StacksPublicKey\n  | TransactionAuthField\n  | MessageSignature;\n\nexport function serializeStacksMessage(message: StacksMessage): Uint8Array {\n  switch (message.type) {\n    case StacksMessageType.Address:\n      return serializeAddress(message);\n    case StacksMessageType.Principal:\n      return serializePrincipal(message);\n    case StacksMessageType.LengthPrefixedString:\n      return serializeLPString(message);\n    case StacksMessageType.MemoString:\n      return serializeMemoString(message);\n    case StacksMessageType.AssetInfo:\n      return serializeAssetInfo(message);\n    case StacksMessageType.PostCondition:\n      return serializePostCondition(message);\n    case StacksMessageType.PublicKey:\n      return serializePublicKey(message);\n    case StacksMessageType.LengthPrefixedList:\n      return serializeLPList(message);\n    case StacksMessageType.Payload:\n      return serializePayload(message);\n    case StacksMessageType.TransactionAuthField:\n      return serializeTransactionAuthField(message);\n    case StacksMessageType.MessageSignature:\n      return serializeMessageSignature(message);\n  }\n}\n\nexport function deserializeStacksMessage(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  listType?: StacksMessageType\n): StacksMessage {\n  switch (type) {\n    case StacksMessageType.Address:\n      return deserializeAddress(bytesReader);\n    case StacksMessageType.Principal:\n      return deserializePrincipal(bytesReader);\n    case StacksMessageType.LengthPrefixedString:\n      return deserializeLPString(bytesReader);\n    case StacksMessageType.MemoString:\n      return deserializeMemoString(bytesReader);\n    case StacksMessageType.AssetInfo:\n      return deserializeAssetInfo(bytesReader);\n    case StacksMessageType.PostCondition:\n      return deserializePostCondition(bytesReader);\n    case StacksMessageType.PublicKey:\n      return deserializePublicKey(bytesReader);\n    case StacksMessageType.Payload:\n      return deserializePayload(bytesReader);\n    case StacksMessageType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No List Type specified');\n      }\n      return deserializeLPList(bytesReader, listType);\n    case StacksMessageType.MessageSignature:\n      return deserializeMessageSignature(bytesReader);\n    default:\n      throw new Error('Could not recognize StacksMessageType');\n  }\n}\n\nexport function createEmptyAddress(): Address {\n  return {\n    type: StacksMessageType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function addressFromHashMode(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion,\n  data: string\n): Address {\n  const version = addressHashModeToVersion(hashMode, txVersion);\n  return addressFromVersionHash(version, data);\n}\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  publicKeys: StacksPublicKey[]\n): Address {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n    for (let i = 0; i < publicKeys.length; i++) {\n      if (!isCompressed(publicKeys[i])) {\n        throw Error('Public keys must be compressed for segwit');\n      }\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2WPKH:\n      return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2SH:\n      return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n    case AddressHashMode.SerializeP2WSH:\n      return addressFromVersionHash(\n        version,\n        hashP2WSH(numSigs, publicKeys.map(serializePublicKey))\n      );\n  }\n}\n\nexport function serializeAddress(address: Address): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n  bytesArray.push(hexToBytes(address.hash160));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAddress(bytesReader: BytesReader): Address {\n  const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n  const data = bytesToHex(bytesReader.readBytes(20));\n\n  return { type: StacksMessageType.Address, version, hash160: data };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipal): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(principal.prefix);\n  bytesArray.push(serializeAddress(principal.address));\n  if (principal.prefix === PostConditionPrincipalID.Contract) {\n    bytesArray.push(serializeLPString(principal.contractName));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializePrincipal(bytesReader: BytesReader): PostConditionPrincipal {\n  const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalID, n => {\n    throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n  });\n  const address = deserializeAddress(bytesReader);\n  if (prefix === PostConditionPrincipalID.Standard) {\n    return { type: StacksMessageType.Principal, prefix, address } as StandardPrincipal;\n  }\n  const contractName = deserializeLPString(bytesReader);\n  return {\n    type: StacksMessageType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipal;\n}\n\nexport function serializeLPString(lps: LengthPrefixedString) {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(lps.content);\n  const length = contentBytes.byteLength;\n  bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n  bytesArray.push(contentBytes);\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPString(\n  bytesReader: BytesReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedString {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n  const content = bytesToUtf8(bytesReader.readBytes(length));\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function codeBodyString(content: string): LengthPrefixedString {\n  return createLPString(content, 4, 100_000);\n}\n\nexport interface MemoString {\n  readonly type: StacksMessageType.MemoString;\n  readonly content: string;\n}\n\nexport function createMemoString(content: string): MemoString {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeMemoString(memoString: MemoString): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(memoString.content);\n  const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n  bytesArray.push(hexToBytes(paddedContent));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeMemoString(bytesReader: BytesReader): MemoString {\n  const content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeAssetInfo(info: AssetInfo): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(serializeAddress(info.address));\n  bytesArray.push(serializeLPString(info.contractName));\n  bytesArray.push(serializeLPString(info.assetName));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAssetInfo(bytesReader: BytesReader): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: deserializeAddress(bytesReader),\n    contractName: deserializeLPString(bytesReader),\n    assetName: deserializeLPString(bytesReader),\n  };\n}\n\nexport interface LengthPrefixedList {\n  readonly type: StacksMessageType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: StacksMessage[];\n}\n\nexport function createLPList<T extends StacksMessage>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  return {\n    type: StacksMessageType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): Uint8Array {\n  const list = lpList.values;\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n  for (const l of list) {\n    bytesArray.push(serializeStacksMessage(l));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPList(\n  bytesReader: BytesReader,\n  type: StacksMessageType,\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n\n  const l: StacksMessage[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksMessageType.Address:\n        l.push(deserializeAddress(bytesReader));\n        break;\n      case StacksMessageType.LengthPrefixedString:\n        l.push(deserializeLPString(bytesReader));\n        break;\n      case StacksMessageType.MemoString:\n        l.push(deserializeMemoString(bytesReader));\n        break;\n      case StacksMessageType.AssetInfo:\n        l.push(deserializeAssetInfo(bytesReader));\n        break;\n      case StacksMessageType.PostCondition:\n        l.push(deserializePostCondition(bytesReader));\n        break;\n      case StacksMessageType.PublicKey:\n        l.push(deserializePublicKey(bytesReader));\n        break;\n      case StacksMessageType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bytesReader));\n        break;\n    }\n  }\n  return createLPList(l, lengthPrefixBytes);\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(postCondition.conditionType);\n  bytesArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bytesArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bytesArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bytesArray.push(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    bytesArray.push(intToBytes(postCondition.amount, false, 8));\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePostCondition(bytesReader: BytesReader): PostCondition {\n  const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bytesReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount: bigint;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bytesReader);\n      const assetName = deserializeCV(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n","import {\n  concatArray,\n  concatBytes,\n  bigIntToBytes,\n  toTwos,\n  writeUInt32BE,\n  utf8ToBytes,\n  asciiToBytes,\n} from '@stacks/common';\nimport { serializeAddress, serializeLPString } from '../types';\nimport { createLPString } from '../postcondition-types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityValue,\n} from '.';\nimport { ClarityType } from './constants';\n\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\n\nfunction bytesWithTypeID(typeId: ClarityType, bytes: Uint8Array): Uint8Array {\n  return concatArray([typeId, bytes]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Uint8Array {\n  return new Uint8Array([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Uint8Array {\n  if (cv.type === ClarityType.OptionalNone) {\n    return new Uint8Array([cv.type]);\n  } else {\n    return bytesWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Uint8Array {\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.buffer.length, 0);\n  return bytesWithTypeID(cv.type, concatBytes(length, cv.buffer));\n}\n\nfunction serializeIntCV(cv: IntCV): Uint8Array {\n  const bytes = bigIntToBytes(toTwos(cv.value, BigInt(CLARITY_INT_SIZE)), CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeUIntCV(cv: UIntCV): Uint8Array {\n  const bytes = bigIntToBytes(cv.value, CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Uint8Array {\n  return bytesWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Uint8Array {\n  return bytesWithTypeID(\n    cv.type,\n    concatBytes(serializeAddress(cv.address), serializeLPString(cv.contractName))\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bytesWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.list.length, 0);\n  bytesArray.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Object.keys(cv.data).length, 0);\n  bytesArray.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => a.localeCompare(b));\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    bytesArray.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const bytesArray = [];\n\n  const str = encoding == 'ascii' ? asciiToBytes(cv.data) : utf8ToBytes(cv.data);\n  const len = new Uint8Array(4);\n  writeUInt32BE(len, str.length, 0);\n\n  bytesArray.push(len);\n  bytesArray.push(str);\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\n/**\n * Serializes clarity value to Uint8Array\n *\n * @param {ClarityValue} value to be converted to bytes\n **\n * @returns {Uint8Array} returns the bytes\n *\n * @example\n * ```\n *  import { intCV, serializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nexport function serializeCV(value: ClarityValue): Uint8Array {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.UInt:\n      return serializeUIntCV(value);\n    case ClarityType.Int:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes, with0x } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity';\n\n// Export verify as utility method for signature verification\nexport { verify as verifySignature } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates random bytes of given length\n * @param {number} bytesLength an optional bytes length, default is 32 bytes\n */\nexport const randomBytes = (bytesLength?: number): Uint8Array => utils.randomBytes(bytesLength);\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? utf8ToBytes(string).length > maxLengthBytes : false;\n\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport const txidFromData = (data: Uint8Array): string => {\n  return bytesToHex(sha512_256(data));\n};\n\nexport const hash160 = (input: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\nexport const hashP2PKH = (input: Uint8Array): string => {\n  return bytesToHex(hash160(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address over p2sh (p2h-p2wpkh)\nexport const hashP2WPKH = (input: Uint8Array): string => {\n  const keyHash = hash160(input);\n  const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\nexport const hashP2SH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bytesArray = [];\n  // OP_n\n  bytesArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bytesArray.push(pubKey.length);\n    bytesArray.push(pubKey);\n  });\n  // OP_m\n  bytesArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bytesArray.push(174);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multisig address over p2sh (p2sh-p2wsh)\nexport const hashP2WSH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2WSH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const scriptArray = [];\n  // OP_n\n  scriptArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    scriptArray.push(pubKey.length);\n    scriptArray.push(pubKey);\n  });\n  // OP_m\n  scriptArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  scriptArray.push(174);\n\n  const script = concatArray(scriptArray);\n  const digest = sha256(script);\n\n  const bytesArray = [];\n  bytesArray.push(0);\n  bytesArray.push(digest.length);\n  bytesArray.push(digest);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${bytesToHex(serialized)}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  return deserializeCV(hex);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) {\n    return hexToCV(response.result);\n  } else {\n    throw new Error(response.cause);\n  }\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const validateTxId = (txid: string): boolean => {\n  if (txid === 'success') return true; // Bypass fetchMock tests\n  const value = with0x(txid).toLowerCase();\n  if (value.length !== 66) return false;\n  return with0x(BigInt(value).toString(16).padStart(64, '0')) === value;\n};\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  writeUInt16BE,\n} from '@stacks/common';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  TransactionAuthField,\n  serializeMessageSignature,\n  deserializeMessageSignature,\n} from './signature';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  createStacksPublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignatureVrs,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { MessageSignature } from './common';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport { BytesReader } from './bytesReader';\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignature(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPList(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  }\n  return serializeMultiSigSpendingCondition(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, false, 8)) +\n    bytesToHex(intToBytes(nonce, false, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    0,\n    0\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: StacksPublicKey[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    let foundPubKey: StacksPublicKey;\n\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        foundPubKey = field.contents;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents\n        );\n        curSigHash = nextSigHash;\n        foundPubKey = pubKey;\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n\n        break;\n    }\n    publicKeys.push(foundPubKey);\n  }\n\n  if (numSigs !== condition.signaturesRequired)\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0,\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n    fee: intToBigInt(sponsorSpendingCondition.fee, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n","import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  AnchorMode,\n  AuthType,\n  ChainID,\n  DEFAULT_CHAIN_ID,\n  PayloadType,\n  PostConditionMode,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport {\n  Authorization,\n  deserializeAuthorization,\n  intoInitialSighashAuth,\n  isSingleSig,\n  nextSignature,\n  serializeAuthorization,\n  setFee,\n  setNonce,\n  setSponsor,\n  setSponsorNonce,\n  SpendingConditionOpts,\n  verifyOrigin,\n} from './authorization';\nimport { createTransactionAuthField } from './signature';\n\nimport { cloneDeep, txidFromData } from './utils';\n\nimport { deserializePayload, Payload, PayloadInput, serializePayload } from './payload';\n\nimport { createLPList, deserializeLPList, LengthPrefixedList, serializeLPList } from './types';\n\nimport { isCompressed, StacksPrivateKey, StacksPublicKey } from './keys';\n\nimport { BytesReader } from './bytesReader';\n\nimport { SerializationError, SigningError } from './errors';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: PayloadInput,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    if ('amount' in payload) {\n      this.payload = {\n        ...payload,\n        amount: intToBigInt(payload.amount, false),\n      };\n    } else {\n      this.payload = payload;\n    }\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorMode;\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.PoisonMicroblock: {\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        }\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.TokenTransfer: {\n          this.anchorMode = AnchorMode.Any;\n          break;\n        }\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyOrigin(): string {\n    return verifyOrigin(this.auth, this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.authType === AuthType.Sponsored) {\n      return this.signAndAppend(\n        this.auth.sponsorSpendingCondition,\n        sigHash,\n        AuthType.Sponsored,\n        privateKey\n      );\n    } else {\n      throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n    }\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = isCompressed(publicKey);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          publicKey\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingConditionOpts,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      const compressed = bytesToHex(privateKey.data).endsWith('01');\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          nextSig\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingConditionOpts) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param fee - the fee amount in microstacks\n   */\n  setFee(amount: IntegerType) {\n    this.auth = setFee(this.auth, amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param nonce - the nonce value\n   */\n  setNonce(nonce: IntegerType) {\n    this.auth = setNonce(this.auth, nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: IntegerType) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsorNonce(this.auth, nonce);\n  }\n\n  serialize(): Uint8Array {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bytesArray = [];\n\n    bytesArray.push(this.version);\n    const chainIdBytes = new Uint8Array(4);\n    writeUInt32BE(chainIdBytes, this.chainId, 0);\n    bytesArray.push(chainIdBytes);\n    bytesArray.push(serializeAuthorization(this.auth));\n    bytesArray.push(this.anchorMode);\n    bytesArray.push(this.postConditionMode);\n    bytesArray.push(serializeLPList(this.postConditions));\n    bytesArray.push(serializePayload(this.payload));\n\n    return concatArray(bytesArray);\n  }\n}\n\n/**\n * @param data Uint8Array or hex string\n */\nexport function deserializeTransaction(data: BytesReader | Uint8Array | string) {\n  let bytesReader: BytesReader;\n  if (typeof data === 'string') {\n    if (data.slice(0, 2).toLowerCase() === '0x') {\n      bytesReader = new BytesReader(hexToBytes(data.slice(2)));\n    } else {\n      bytesReader = new BytesReader(hexToBytes(data));\n    }\n  } else if (data instanceof Uint8Array) {\n    bytesReader = new BytesReader(data);\n  } else {\n    bytesReader = data;\n  }\n  const version = bytesReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bytesReader.readUInt32BE();\n  const auth = deserializeAuthorization(bytesReader);\n  const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bytesReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bytesReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n","import { IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport {\n  AssetInfo,\n  PostConditionPrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n} from './postcondition-types';\n\nimport { ClarityValue } from './clarity';\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n  };\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo,\n  };\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n","import {\n  BooleanCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n  NoneCV,\n  SomeCV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, bytesToHex, utf8ToBytes } from '@stacks/common';\n\nexport type ClarityValue =\n  | BooleanCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | NoneCV\n  | SomeCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = bytesToAscii(val.buffer);\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\n/**\n * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when\n * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.\n * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.\n */\nexport function cvToValue(val: ClarityValue, strictJsonCompat: boolean = false): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return `0x${bytesToHex(val.buffer)}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val, true) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${\n        val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType'\n      })`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${asciiToBytes(val.data).length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${utf8ToBytes(val.data).length})`;\n  }\n}\n","import 'cross-fetch/polyfill';\nconst defaultFetchOpts = {\n    referrerPolicy: 'origin',\n};\nexport const getFetchOptions = () => {\n    return defaultFetchOpts;\n};\nexport const setFetchOptions = (ops) => {\n    return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n    const fetchOpts = {};\n    Object.assign(fetchOpts, init, defaultFetchOpts);\n    const fetchResult = await fetch(input, fetchOpts);\n    return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n    if (typeof pattern === 'string')\n        return pattern === host;\n    return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)\\.stacks\\.co$/i, httpHeader = 'x-api-key', }) {\n    return {\n        pre: context => {\n            const reqUrl = new URL(context.url);\n            if (!hostMatches(reqUrl.host, host))\n                return;\n            const headers = new Headers(context.init.headers);\n            headers.set(httpHeader, apiKey);\n            context.init.headers = headers;\n        },\n    };\n}\nfunction argsForCreateFetchFn(args) {\n    let fetchLib = fetchWrapper;\n    let middlewares = [];\n    if (args.length > 0 && typeof args[0] === 'function') {\n        fetchLib = args.shift();\n    }\n    if (args.length > 0) {\n        middlewares = args;\n    }\n    return { fetchLib, middlewares };\n}\nexport function createFetchFn(...args) {\n    const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n    const fetchFn = async (url, init) => {\n        var _a;\n        let fetchParams = { url, init: init !== null && init !== void 0 ? init : {} };\n        for (const middleware of middlewares) {\n            if (typeof middleware.pre === 'function') {\n                const result = await Promise.resolve(middleware.pre(Object.assign({ fetch: fetchLib }, fetchParams)));\n                fetchParams = result !== null && result !== void 0 ? result : fetchParams;\n            }\n        }\n        let response = await fetchLib(fetchParams.url, fetchParams.init);\n        for (const middleware of middlewares) {\n            if (typeof middleware.post === 'function') {\n                const result = await Promise.resolve(middleware.post({\n                    fetch: fetchLib,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: (_a = response === null || response === void 0 ? void 0 : response.clone()) !== null && _a !== void 0 ? _a : response,\n                }));\n                response = result !== null && result !== void 0 ? result : response;\n            }\n        }\n        return response;\n    };\n    return fetchFn;\n}\n//# sourceMappingURL=fetch.js.map","import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn } from './fetch';\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport const StacksNetworks = ['mainnet', 'testnet'];\nexport class StacksNetwork {\n    constructor(networkConfig) {\n        var _a;\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n        this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n        this.broadcastEndpoint = '/v2/transactions';\n        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n        this.transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n        this.accountEndpoint = '/v2/accounts';\n        this.contractAbiEndpoint = '/v2/contracts/interface';\n        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n        this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n        this.getTransactionFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n        this.getRewardsUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getRewardsTotalUrl = (address) => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n        this.getRewardHoldersUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n        this.coreApiUrl = networkConfig.url;\n        this.fetchFn = (_a = networkConfig.fetchFn) !== null && _a !== void 0 ? _a : createFetchFn();\n    }\n    getNameInfo(fullyQualifiedName) {\n        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n        return this.fetchFn(nameLookupURL)\n            .then(resp => {\n            if (resp.status === 404) {\n                throw new Error('Name not found');\n            }\n            else if (resp.status !== 200) {\n                throw new Error(`Bad response status: ${resp.status}`);\n            }\n            else {\n                return resp.json();\n            }\n        })\n            .then(nameInfo => {\n            if (nameInfo.address) {\n                return Object.assign({}, nameInfo, { address: nameInfo.address });\n            }\n            else {\n                return nameInfo;\n            }\n        });\n    }\n}\nStacksNetwork.fromName = (networkName) => {\n    switch (networkName) {\n        case 'mainnet':\n            return new StacksMainnet();\n        case 'testnet':\n            return new StacksTestnet();\n        default:\n            throw new Error(`Invalid network name provided. Must be one of the following: ${StacksNetworks.join(', ')}`);\n    }\n};\nStacksNetwork.fromNameOrNetwork = (network) => {\n    if (typeof network !== 'string' && 'version' in network) {\n        return network;\n    }\n    return StacksNetwork.fromName(network);\n};\nexport class StacksMainnet extends StacksNetwork {\n    constructor(opts) {\n        var _a;\n        super({\n            url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_MAINNET_DEFAULT,\n            fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn,\n        });\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n    }\n}\nexport class StacksTestnet extends StacksNetwork {\n    constructor(opts) {\n        var _a;\n        super({\n            url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_TESTNET_DEFAULT,\n            fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport class StacksMocknet extends StacksNetwork {\n    constructor(opts) {\n        var _a;\n        super({\n            url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_MOCKNET_DEFAULT,\n            fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\n//# sourceMappingURL=network.js.map","import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { utf8ToBytes } from '@stacks/common';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(utf8ToBytes(val));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksPrivateKey, StacksPublicKey } from './keys';\nimport { isSingleSig, nextVerification, SpendingConditionOpts } from './authorization';\nimport { cloneDeep } from './utils';\nimport { AuthType, PubKeyEncoding, StacksMessageType } from './constants';\nimport { SigningError } from './errors';\n\nexport class TransactionSigner {\n  transaction: StacksTransaction;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransaction) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n\n    // If multi-sig spending condition exists, iterate over\n    // auth fields and reconstruct sigHash\n    const spendingCondition = transaction.auth.spendingCondition;\n    if (spendingCondition && !isSingleSig(spendingCondition)) {\n      if (\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksMessageType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('SpendingCondition has more signatures than are expected');\n      }\n\n      spendingCondition.fields.forEach(field => {\n        if (field.contents.type === StacksMessageType.MessageSignature) {\n          const signature = field.contents;\n          const nextVerify = nextVerification(\n            this.sigHash,\n            transaction.auth.authType,\n            spendingCondition.fee,\n            spendingCondition.nonce,\n            PubKeyEncoding.Compressed, // always compressed for multisig\n            signature\n          );\n          this.sigHash = nextVerify.nextSigHash;\n        }\n      });\n    }\n  }\n\n  static createSponsorSigner(\n    transaction: StacksTransaction,\n    spendingCondition: SpendingConditionOpts\n  ) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransaction = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: StacksPrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    if (!isSingleSig(this.transaction.auth.spendingCondition)) {\n      const spendingCondition = this.transaction.auth.spendingCondition;\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksMessageType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n  }\n\n  appendOrigin(publicKey: StacksPublicKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(publicKey);\n  }\n\n  signSponsor(privateKey: StacksPrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.authType !== AuthType.Sponsored) {\n      throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransaction {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransaction) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n","import { bytesToHex, hexToBytes, IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  StacksNetwork,\n  StacksMainnet,\n  StacksNetworkName,\n  StacksTestnet,\n  FetchFn,\n  createFetchFn,\n} from '@stacks/network';\nimport { c32address } from 'c32check';\nimport {\n  Authorization,\n  createMultiSigSpendingCondition,\n  createSingleSigSpendingCondition,\n  createSponsoredAuth,\n  createStandardAuth,\n  SpendingCondition,\n  MultiSigSpendingCondition,\n} from './authorization';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport {\n  AddressHashMode,\n  AddressVersion,\n  AnchorMode,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionMode,\n  SingleSigHashMode,\n  TransactionVersion,\n  TxRejectedReason,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  StacksMessageType,\n} from './constants';\nimport { ClarityAbi, validateContractCall } from './contract-abi';\nimport {\n  createStacksPrivateKey,\n  createStacksPublicKey,\n  getPublicKey,\n  pubKeyfromPrivKey,\n  publicKeyFromBytes,\n  publicKeyToAddress,\n  publicKeyToString,\n} from './keys';\nimport {\n  createContractCallPayload,\n  createSmartContractPayload,\n  createTokenTransferPayload,\n  Payload,\n  serializePayload,\n} from './payload';\nimport {\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n  createSTXPostCondition,\n} from './postcondition';\nimport {\n  AssetInfo,\n  createContractPrincipal,\n  createStandardPrincipal,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  PostCondition,\n  STXPostCondition,\n} from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransaction } from './transaction';\nimport { createLPList } from './types';\nimport { cvToHex, omit, parseReadOnlyResponse, validateTxId } from './utils';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(\n  address: string,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getAccountApiUrl(address);\n\n  const response = await derivedNetwork.fetchFn(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const responseText = await response.text();\n  const result = JSON.parse(responseText) as { nonce: string };\n  return BigInt(result.nonce);\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = BigInt(transaction.serialize().byteLength);\n  const feeRate = BigInt(feeRateResult);\n  return feeRate * txBytes;\n}\n\ninterface FeeEstimation {\n  fee: number;\n  fee_rate: number;\n}\ninterface FeeEstimateResponse {\n  cost_scalar_change_by_byte: bigint;\n  estimated_cost: {\n    read_count: bigint;\n    read_length: bigint;\n    runtime: bigint;\n    write_count: bigint;\n    write_length: bigint;\n  };\n  estimated_cost_scalar: bigint;\n  estimations: [FeeEstimation, FeeEstimation, FeeEstimation];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a Stacks transaction\n *\n * @param {StacksTransaction} transaction - the transaction to estimate fees for\n * @param {number} estimatedLen - is an optional argument that provides the endpoint with an\n * estimation of the final length (in bytes) of the transaction, including any post-conditions\n * and signatures\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction fees for\n *\n * @return a promise that resolves to FeeEstimate\n */\nexport async function estimateTransaction(\n  transactionPayload: Payload,\n  estimatedLen?: number,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<[FeeEstimation, FeeEstimation, FeeEstimation]> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      transaction_payload: bytesToHex(serializePayload(transactionPayload)),\n      ...(estimatedLen ? { estimated_len: estimatedLen } : {}),\n    }),\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n  const url = derivedNetwork.getTransactionFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, options);\n\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const data: FeeEstimateResponse = await response.json();\n  return data.estimations;\n}\n\nexport type SerializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Serialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type DeserializationRejection = {\n  error: string;\n  reason: TxRejectedReason.Deserialization;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type SignatureValidationRejection = {\n  error: string;\n  reason: TxRejectedReason.SignatureValidation;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type BadNonceRejection = {\n  error: string;\n  reason: TxRejectedReason.BadNonce;\n  reason_data: {\n    expected: number;\n    actual: number;\n    is_origin: boolean;\n    principal: boolean;\n  };\n  txid: string;\n};\n\nexport type FeeTooLowRejection = {\n  error: string;\n  reason: TxRejectedReason.FeeTooLow;\n  reason_data: {\n    expected: number;\n    actual: number;\n  };\n  txid: string;\n};\n\nexport type NotEnoughFundsRejection = {\n  error: string;\n  reason: TxRejectedReason.NotEnoughFunds;\n  reason_data: {\n    expected: string;\n    actual: string;\n  };\n  txid: string;\n};\n\nexport type NoSuchContractRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchContract;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoSuchPublicFunctionRejection = {\n  error: string;\n  reason: TxRejectedReason.NoSuchPublicFunction;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadFunctionArgumentRejection = {\n  error: string;\n  reason: TxRejectedReason.BadFunctionArgument;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type ContractAlreadyExistsRejection = {\n  error: string;\n  reason: TxRejectedReason.ContractAlreadyExists;\n  reason_data: {\n    contract_identifier: string;\n  };\n  txid: string;\n};\n\nexport type PoisonMicroblocksDoNotConflictRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblocksDoNotConflict;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockHasUnknownPubKeyHashRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockHasUnknownPubKeyHash;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type PoisonMicroblockIsInvalidRejection = {\n  error: string;\n  reason: TxRejectedReason.PoisonMicroblockIsInvalid;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type BadAddressVersionByteRejection = {\n  error: string;\n  reason: TxRejectedReason.BadAddressVersionByte;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type NoCoinbaseViaMempoolRejection = {\n  error: string;\n  reason: TxRejectedReason.NoCoinbaseViaMempool;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureNoSuchChainTipRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureNoSuchChainTip;\n  reason_data?: undefined;\n  txid: string;\n};\n\nexport type ServerFailureDatabaseRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureDatabase;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type ServerFailureOtherRejection = {\n  error: string;\n  reason: TxRejectedReason.ServerFailureOther;\n  reason_data: {\n    message: string;\n  };\n  txid: string;\n};\n\nexport type TxBroadcastResultOk = {\n  txid: string;\n  error?: undefined;\n  reason?: undefined;\n  reason_data?: undefined;\n};\n\nexport type TxBroadcastResultRejected =\n  | SerializationRejection\n  | DeserializationRejection\n  | SignatureValidationRejection\n  | BadNonceRejection\n  | FeeTooLowRejection\n  | NotEnoughFundsRejection\n  | NoSuchContractRejection\n  | NoSuchPublicFunctionRejection\n  | BadFunctionArgumentRejection\n  | ContractAlreadyExistsRejection\n  | PoisonMicroblocksDoNotConflictRejection\n  | PoisonMicroblockHasUnknownPubKeyHashRejection\n  | PoisonMicroblockIsInvalidRejection\n  | BadAddressVersionByteRejection\n  | NoCoinbaseViaMempoolRejection\n  | ServerFailureNoSuchChainTipRejection\n  | ServerFailureDatabaseRejection\n  | ServerFailureOtherRejection;\n\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork,\n  attachment?: Uint8Array\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url, attachment, derivedNetwork.fetchFn);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Uint8Array} rawTx - the raw serialized transaction bytes to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Uint8Array,\n  url: string,\n  attachment?: Uint8Array,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<TxBroadcastResult> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n    body: attachment\n      ? JSON.stringify({\n          tx: bytesToHex(rawTx),\n          attachment: bytesToHex(attachment),\n        })\n      : rawTx,\n  };\n\n  const response = await fetchFn(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  // Replace extra quotes around txid string\n  const txid = text.replace(/[\"]+/g, '');\n  const isValidTxId = validateTxId(txid);\n  if (!isValidTxId) {\n    throw new Error(text);\n  }\n  return {\n    txid,\n  } as TxBroadcastResult;\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetworkName | StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n  const url = derivedNetwork.getAbiApiUrl(address, contractName);\n\n  const response = await derivedNetwork.fetchFn(url, options);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nfunction deriveNetwork(transaction: StacksTransaction) {\n  switch (transaction.version) {\n    case TransactionVersion.Mainnet:\n      return new StacksMainnet();\n    case TransactionVersion.Testnet:\n      return new StacksTestnet();\n  }\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n */\nexport interface TokenTransferOptions {\n  /** the address of the recipient of the token transfer */\n  recipient: string | PrincipalCV;\n  /** the amount to be transfered in microstacks */\n  amount: IntegerType;\n  /** the transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorMode;\n  /** an arbitrary string to include in the transaction, must be less than 34 bytes */\n  memo?: string;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param  {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization: Authorization | null = null;\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const estimatedLen = estimateTransactionByteLength(transaction);\n    const txFee = await estimateTransaction(payload, estimatedLen, options.network);\n    transaction.setFee(txFee[1].fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param  {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    // txOptions is SignedTokenTransferOptions\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // txOptions is SignedMultiSigTokenTransferOptions\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n */\nexport interface BaseContractDeployOptions {\n  contractName: string;\n  /** the Clarity code to be deployed */\n  codeBody: string;\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the network that the transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface ContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the private key of the transaction sender */\n  senderKey: string;\n}\n\nexport interface UnsignedContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the public key of the transaction sender */\n  publicKey: string;\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.SmartContract) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param  {ContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: ContractDeployOptions\n): Promise<StacksTransaction> {\n  const privKey = createStacksPrivateKey(txOptions.senderKey);\n  const stacksPublicKey = getPublicKey(privKey);\n  const publicKey = publicKeyToString(stacksPublicKey);\n  const unsignedTxOptions: UnsignedContractDeployOptions = { ...txOptions, publicKey };\n  const transaction: StacksTransaction = await makeUnsignedContractDeploy(unsignedTxOptions);\n\n  if (txOptions.senderKey) {\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n  }\n\n  return transaction;\n}\n\nexport async function makeUnsignedContractDeploy(\n  txOptions: UnsignedContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(options.contractName, options.codeBody);\n\n  const addressHashMode = AddressHashMode.SerializeP2PKH;\n  const pubKey = createStacksPublicKey(options.publicKey);\n\n  let authorization: Authorization | null = null;\n\n  const spendingCondition = createSingleSigSpendingCondition(\n    addressHashMode,\n    publicKeyToString(pubKey),\n    options.nonce,\n    options.fee\n  );\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const estimatedLen = estimateTransactionByteLength(transaction);\n    const txFee = await estimateTransaction(payload, estimatedLen, options.network);\n    transaction.setFee(txFee[1].fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = publicKeyToAddress(addressVersion, pubKey);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n */\nexport interface ContractCallOptions {\n  /** the Stacks address of the contract */\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  feeEstimateApiUrl?: string;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the Stacks blockchain network that will ultimately be used to broadcast this transaction */\n  network?: StacksNetworkName | StacksNetwork;\n  /** the transaction anchorMode, which specifies whether it should be\n   * included in an anchor block or a microblock */\n  anchorMode: AnchorMode;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: PostCondition[];\n  /** set to true to validate that the supplied function args match those specified in\n   * the published contract */\n  validateWithAbi?: boolean | ClarityAbi;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * @deprecated Use the new {@link estimateTransaction} function insterad.\n *\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetworkName | StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetworkName | StacksNetwork\n): Promise<bigint> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n  const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await derivedNetwork.fetchFn(url, fetchOptions);\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n  const feeRate = intToBigInt(feeRateResult, false);\n  return feeRate * txBytes;\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: new StacksMainnet(),\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition: SpendingCondition | null = null;\n  let authorization: Authorization | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = createSponsoredAuth(spendingCondition);\n  } else {\n    authorization = createStandardAuth(spendingCondition);\n  }\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    network.chainId\n  );\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const estimatedLen = estimateTransactionByteLength(transaction);\n    const txFee = await estimateTransaction(payload, estimatedLen, network);\n    transaction.setFee(txFee[1].fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param  {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param address - the c32check address of the contract\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param address - the c32check address\n * @param contractName - the name of the contract\n * @param conditionCode - the condition code\n * @param amount - the amount of fungible tokens\n * @param assetInfo - asset info describing the fungible token\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Read only function options\n *\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** the network that the contract which contains the function is deployed to */\n  network?: StacksNetworkName | StacksNetwork;\n  /** address of the sender */\n  senderAddress: string;\n}\n\n/**\n * Calls a function as read-only from a contract interface\n * It is not necessary that the function is defined as read-only in the contract\n *\n * @param  {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const { contractName, contractAddress, functionName, functionArgs, senderAddress } = options;\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await network.fetchFn(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\n/**\n * Sponsored transaction options\n */\nexport interface SponsorOptionsOpts {\n  /** the origin-signed transaction */\n  transaction: StacksTransaction;\n  /** the sponsor's private key */\n  sponsorPrivateKey: string;\n  /** the transaction fee amount to sponsor */\n  fee?: IntegerType;\n  /** the nonce of the sponsor account */\n  sponsorNonce?: IntegerType;\n  /** the hashmode of the sponsor's address */\n  sponsorAddressHashmode?: AddressHashMode;\n  /** the Stacks blockchain network that this transaction will ultimately be broadcast to */\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param  {SponsorOptionsOpts} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptionsOpts\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: 0 as IntegerType,\n    sponsorNonce: 0 as IntegerType,\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n    network:\n      sponsorOptions.transaction.version === TransactionVersion.Mainnet\n        ? new StacksMainnet()\n        : new StacksTestnet(),\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (sponsorOptions.fee === undefined || sponsorOptions.fee === null) {\n    let txFee = 0;\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n      case PayloadType.SmartContract:\n      case PayloadType.ContractCall:\n        const estimatedLen = estimateTransactionByteLength(options.transaction);\n        try {\n          txFee = (await estimateTransaction(options.transaction.payload, estimatedLen, network))[1]\n            .fee;\n        } catch (e) {\n          throw e;\n        }\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (sponsorOptions.sponsorNonce === undefined || sponsorOptions.sponsorNonce === null) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return signer.transaction;\n}\n\n/**\n * Estimates transaction byte length\n * Context:\n * 1) Multi-sig transaction byte length increases by adding signatures\n *    which causes the incorrect fee estimation because the fee value is set while creating unsigned transaction\n * 2) Single-sig transaction byte length remain same due to empty message signature which allocates the space for signature\n * @param {transaction} - StacksTransaction object to be estimated\n * @return {number} Estimated transaction byte length\n */\nexport function estimateTransactionByteLength(transaction: StacksTransaction): number {\n  const hashMode = transaction.auth.spendingCondition.hashMode;\n  // List of Multi-sig transaction hash modes\n  const multiSigHashModes = [AddressHashMode.SerializeP2SH, AddressHashMode.SerializeP2WSH];\n\n  // Check if its a Multi-sig transaction\n  if (multiSigHashModes.includes(hashMode)) {\n    const multiSigSpendingCondition: MultiSigSpendingCondition = transaction.auth\n      .spendingCondition as MultiSigSpendingCondition;\n\n    // Find number of existing signatures if the transaction is signed or partially signed\n    const existingSignatures = multiSigSpendingCondition.fields.filter(\n      field => field.contents.type === StacksMessageType.MessageSignature\n    ).length; // existingSignatures will be 0 if its a unsigned transaction\n\n    // Estimate total signature bytes size required for this multi-sig transaction\n    // Formula: totalSignatureLength = (signaturesRequired - existingSignatures) * (SIG_LEN_BYTES + 1 byte of type of signature)\n    const totalSignatureLength =\n      (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n      (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n\n    return transaction.serialize().byteLength + totalSignatureLength;\n  } else {\n    // Single-sig transaction\n    // Signature space already allocated by empty message signature\n    return transaction.serialize().byteLength;\n  }\n}\n","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, concatBytes, utf8ToBytes } from '@stacks/common';\n\nimport { ClarityType, ClarityValue, serializeCV } from './clarity';\nimport { StacksMessageType } from './constants';\nimport { signMessageHashRsv, StacksPrivateKey } from './keys';\n\n// Refer to SIP018 https://github.com/stacksgov/sips/\n// > asciiToBytes('SIP018')\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\n\nexport function hashStructuredData(structuredData: ClarityValue): Uint8Array {\n  return sha256(serializeCV(structuredData));\n}\n\nconst hash256BytesLength = 32;\n\nfunction isDomain(value: ClarityValue): boolean {\n  if (value.type !== ClarityType.Tuple) return false;\n  // Check that the tuple has at least 'name', 'version' and 'chain-id'\n  if (!['name', 'version', 'chain-id'].every(key => key in value.data)) return false;\n  // Check each key is of the right type\n  if (!['name', 'version'].every(key => value.data[key].type === ClarityType.StringASCII))\n    return false;\n\n  if (value.data['chain-id'].type !== ClarityType.UInt) return false;\n  return true;\n}\n\nexport function encodeStructuredData({\n  message,\n  domain,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): Uint8Array {\n  const structuredDataHash: Uint8Array = hashStructuredData(message);\n  if (!isDomain(domain)) {\n    throw new Error(\n      \"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\"\n    );\n  }\n  const domainHash: Uint8Array = hashStructuredData(domain);\n\n  return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\n\nexport type DecodedStructuredData = {\n  domainHash: Uint8Array;\n  messageHash: Uint8Array;\n};\n\nexport function decodeStructuredDataSignature(\n  signature: string | Uint8Array\n): DecodedStructuredData {\n  const encodedMessageBytes: Uint8Array =\n    typeof signature === 'string' ? utf8ToBytes(signature) : signature;\n  const domainHash = encodedMessageBytes.slice(\n    STRUCTURED_DATA_PREFIX.length,\n    STRUCTURED_DATA_PREFIX.length + hash256BytesLength\n  );\n  const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n  return {\n    domainHash,\n    messageHash,\n  };\n}\n\nexport interface StructuredDataSignature {\n  readonly type: StacksMessageType.StructuredDataSignature;\n  data: string;\n}\n\n/**\n * Signs a structured message (ClarityValue) and a domain (ClarityValue) using a private key.\n * The resulting signature along with the original message can be verified using {@link verifyMessageSignature}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signStructuredData({\n  message,\n  domain,\n  privateKey,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n  privateKey: StacksPrivateKey;\n}): StructuredDataSignature {\n  const structuredDataHash: string = bytesToHex(sha256(encodeStructuredData({ message, domain })));\n\n  const { data } = signMessageHashRsv({\n    messageHash: structuredDataHash,\n    privateKey,\n  });\n  return {\n    data,\n    type: StacksMessageType.StructuredDataSignature,\n  };\n}\n"],"names":["root","factory","exports","module","define","amd","this","leafPrototypes","getProto","number","n","Number","isSafeInteger","Error","bool","b","bytes","lengths","Uint8Array","TypeError","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","Object","defineProperty","value","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","pos","buffer","view","createView","update","data","default","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to","crypto","node","undefined","web","self","sha256","_sha2_js_1","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","wrapConstructor","randomBytes","wrapConstructorWithOpts","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","arr","byteLength","floor","DataView","word","shift","hexes","Array","from","toString","padStart","str","TextEncoder","encode","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","clone","defaults","opts","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","hashCons","msg","bytesLength","getRandomValues","ALPHABET","BASE_MAP","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","isArray","pbegin","pend","b58","it1","it2","repeat","decode","string","c32ToB58","b58ToC32","c32addressDecode","c32address","versions","checksum_1","base58check","utils_1","mainnet","p2pkh","p2sh","testnet","ADDR_BITCOIN_TO_STACKS","ADDR_STACKS_TO_BITCOIN","version","hash160hex","match","c32checkEncode","c32addr","c32checkDecode","b58check","addrInfo","hash160String","addrVersion","prefix","stacksVersion","c32string","bitcoinVersion","sha256_1","basex","dataBytes","prefixBytes","checksum","check","index","encoding_1","c32checksum","dataHex","dataHash","toLowerCase","versionHex","checksumHex","c32str","c32encode","c32","c32data","c32normalize","c32decode","versionChar","indexOf","substring","c32input","toUpperCase","replace","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","TextDecoder","numLeadingZeroBytesInHex","count","join","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","address_1","enumerable","support","Symbol","Blob","e","viewClasses","isArrayBufferView","normalizeName","name","String","test","normalizeValue","iteratorFor","items","iterator","next","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","type","rejected","arrayBuffer","then","text","readAsText","chars","fromCharCode","readArrayBufferAsText","formData","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","Request","input","options","method","upcased","url","credentials","mode","signal","referrer","form","trim","split","decodeURIComponent","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","RangeError","location","DOMException","err","stack","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","transform","arg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","getPrototype","getPrototypeOf","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","pop","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","getter","__esModule","d","t","ns","r","def","current","definition","o","globalThis","window","prop","toStringTag","nmd","paths","children","intToBytes","signed","bigIntToBytes","intToBigInt","parsedValue","isInteger","startsWith","SyntaxError","bn","width","nthBit","fromTwos","with0x","hexToBigInt","intToHex","integer","lengthBytes","hexToInt","_","u","paddedHex","bytesToUtf8","asciiToBytes","byteArray","bytesToAscii","apply","isNotOctet","octet","octetsToBytes","numbers","some","concatArray","elements","writeUInt32BE","destination","ChainID","DEFAULT_CHAIN_ID","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","COINBASE_LENGTH_BYTES","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","DEFAULT_CORE_NODE_API_URL","StacksMessageType","whenMessageType","messageType","messageTypeMap","PayloadType","AnchorMode","TransactionVersion","DEFAULT_TRANSACTION_VERSION","PostConditionMode","PostConditionType","AuthType","AddressHashMode","AddressVersion","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalID","AssetType","TxRejectedReason","Rho","Id","Pi","idxL","idxR","k","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","y","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","U32_MASK64","fromBig","le","lst","Ah","Al","s","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512_256","_0n","_1n","_2n","_3n","_8n","CURVE","freeze","P","Gx","Gy","beta","weistrass","x2","mod","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","static","p","Point","points","toInv","nums","scratch","inverted","invert","acc","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","equals","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","base","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","normalizeZ","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","multiply","point","fake","f1p","f2p","invZ","iz1","iz2","iz3","ax","ay","_setWindowSize","delete","hasEvenY","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","assertValidity","ensureBytes","fromCompressedHex","fromUncompressedHex","privateKey","normalizePrivateKey","msgHash","signature","recovery","truncateHash","normalizeSignature","R","fromHex","numTo32bStr","rinv","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","toHex","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","Signature","hexToNumber","sBytes","rBytesLeft","parseDERSignature","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","POW_2_256","numTo32b","power","modulo","q","m","divNearest","ENDO","a1","b1","a2","POW_2_128","c1","c2","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","counter","hmac","utils","hmacSha256","hmacSync","checkSync","incr","seed","reseedSync","generateSync","kmdToSig","kBytes","sig","fromCompact","bits2int","bits2octets","z1","z2","int2octets","vopts","strict","verify","publicKey","normalizePublicKey","sinv","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","randomPrivateKey","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","precompute","defineProperties","configurable","val","HMAC","_key","iHash","oHash","createMessageSignature","MessageSignature","addressHashModeToVersion","hashMode","txVersion","SerializeP2PKH","MainnetSingleSig","TestnetSingleSig","stringify","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","addressFromVersionHash","Address","hash160","addressToString","address","getAddressFromPrivateKey","transactionVersion","getAddressFromPublicKey","pubKeyfromPrivKey","hashP2PKH","createStacksPublicKey","PublicKey","publicKeyFromSignatureVrs","messageHash","messageSignature","pubKeyEncoding","Compressed","parsedSignature","COORDINATE_BYTES","recoveryIdHex","recoveryId","parseRecoverableSignatureVrs","fromSignature","compressed","publicKeyFromSignatureRsv","publicKeyFromBytes","publicKeyToString","serializePublicKey","privKey","createStacksPrivateKey","fromPrivateKey","compressPublicKey","deserializePublicKey","bytesReader","fieldId","readUInt8","keyLength","readBytes","privateKeyBuffer","privateKeyToBytes","makeRandomPrivKey","signWithKey","rawSignature","extraEntropy","seedArgs","initSigArgs","drbg","recSig","canonical","der","recovered","hashed","finalizeSig","signSync","signMessageHashRsv","privateKeyToString","publicKeyToAddress","parseAssetInfoString","assetAddress","assetContractName","assetTokenName","createAssetInfo","createLPString","content","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","exceedsMaxLengthBytes","LengthPrefixedString","addressString","contractName","assetName","AssetInfo","createAddress","c32AddressString","addressData","parsePrincipalString","principalString","createContractPrincipal","createStandardPrincipal","addr","Principal","Contract","Standard","msgs","ClarityType","MAX_U128","MIN_U128","MAX_I128","MIN_I128","intCV","bigInt","Int","uintCV","UInt","bufferCV","bufferCVFromString","trueCV","BoolTrue","falseCV","BoolFalse","principalToString","principal","PrincipalStandard","PrincipalContract","principalCV","contractPrincipalCV","standardPrincipalCV","standardPrincipalCVFromAddress","contractPrincipalCVFromAddress","contractPrincipalCVFromStandard","sp","lengthPrefixedContractName","responseErrorCV","ResponseErr","responseOkCV","ResponseOk","noneCV","OptionalNone","someCV","OptionalSome","listCV","List","list","tupleCV","isClarityName","Tuple","enumCheckFunctions","isEnum","enumVariable","checker","newChecker","enumValues","filter","enumValueSet","createEnumChecker","BytesReader","readUInt32BE","readUInt16BE","readBigUIntLE","reverse","readBigUIntBE","readOffset","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","SerializationError","captureStackTrace","DeserializationError","NotImplementedError","SigningError","VerificationError","stringAsciiCV","StringASCII","stringUtf8CV","StringUTF8","deserializeCV","serializedClarityValue","hasHexPrefix","bufferLength","deserializeAddress","deserializeLPString","listLength","listContents","tupleLength","tupleContents","clarityName","asciiStrLen","asciiStr","utf8StrLen","utf8Str","createTokenTransferPayload","recipient","amount","memo","createMemoString","Payload","payloadType","TokenTransfer","createContractCallPayload","contractAddress","functionName","functionArgs","ContractCall","createSmartContractPayload","codeBody","codeBodyString","SmartContract","serializePayload","payload","bytesArray","serializeCV","serializeStacksMessage","numArgs","PoisonMicroblock","Coinbase","coinbaseBytes","deserializePayload","deserializeMemoString","contractCallName","numberOfArgs","clarityValue","createCoinbasePayload","AuthFieldType","deserializeMessageSignature","createTransactionAuthField","contents","TransactionAuthField","deserializeTransactionAuthField","authFieldType","Uncompressed","serializeMessageSignature","serializeTransactionAuthField","field","serializeAddress","serializePrincipal","serializeLPString","MemoString","serializeMemoString","serializeAssetInfo","PostCondition","serializePostCondition","LengthPrefixedList","serializeLPList","deserializeStacksMessage","listType","deserializePrincipal","deserializeAssetInfo","deserializePostCondition","deserializeLPList","createEmptyAddress","addressFromHashMode","addressFromPublicKeys","numSigs","publicKeys","hashP2WPKH","hashP2SH","hashP2WSH","lps","contentBytes","memoString","paddedContent","rightPadHexToLength","info","createLPList","lpList","postCondition","conditionType","Fungible","NonFungible","assetInfo","conditionCode","STX","postConditionType","bytesWithTypeID","typeId","serializeStringCV","cv","encoding","serializeBoolCV","serializeBufferCV","serializeUIntCV","toTwos","serializeIntCV","serializeStandardPrincipalCV","serializeContractPrincipalCV","serializeResponseCV","serializedValue","serializeListCV","lexicographicOrder","sort","localeCompare","nameWithLength","serializeTupleCV","serializeStringAsciiCV","serializeStringUtf8CV","leftPadHex","hexString","leftPadHexToLength","padEnd","cloneDeep","omit","txidFromData","keyHash","redeemScript","pubKeys","pubKey","scriptArray","script","cvToHex","hexToCV","parseReadOnlyResponse","okay","cause","validateStacksAddress","stacksAddress","validateTxId","txid","emptyMessageSignature","createSingleSigSpendingCondition","nonce","fee","signer","keyEncoding","createMultiSigSpendingCondition","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","serializeSingleSigSpendingCondition","serializeMultiSigSpendingCondition","deserializeSingleSigSpendingCondition","deserializeMultiSigSpendingCondition","haveUncompressed","serializeSpendingCondition","deserializeSpendingCondition","makeSigHashPreSign","curSigHash","authType","sigHash","makeSigHashPostSign","hashLength","sigHashBytes","nextSignature","sigHashPreSign","nextSig","nextSigHash","nextVerification","initialSigHash","createStandardAuth","spendingCondition","createSponsoredAuth","sponsorSpendingCondition","Sponsored","intoInitialSighashAuth","auth","newInitialSigHash","verifyOrigin","addrBytes","verifySingleSig","foundPubKey","verifyMultiSig","setFee","getFee","setNonce","setSponsorNonce","setSponsor","sc","serializeAuthorization","deserializeAuthorization","StacksTransaction","postConditions","postConditionMode","anchorMode","chainId","Deny","OnChainOnly","Any","signBegin","tx","verifyBegin","signNextOrigin","signAndAppend","signNextSponsor","appendPubkey","cond","endsWith","serialized","serialize","chainIdBytes","deserializeTransaction","createSTXPostCondition","createFungiblePostCondition","createNonFungiblePostCondition","cvToString","cvToValue","strictJsonCompat","cvToJSON","getCVTypeString","success","defaultFetchOpts","referrerPolicy","fetchWrapper","fetchOpts","createFetchFn","args","fetchLib","middlewares","argsForCreateFetchFn","_a","fetchParams","middleware","pre","post","StacksNetworks","StacksNetwork","networkConfig","bnsLookupUrl","broadcastEndpoint","transferFeeEstimateEndpoint","transactionFeeEstimateEndpoint","accountEndpoint","contractAbiEndpoint","readOnlyFunctionCallEndpoint","isMainnet","getBroadcastApiUrl","coreApiUrl","getTransferFeeEstimateApiUrl","getTransactionFeeEstimateApiUrl","getAccountApiUrl","getAbiApiUrl","contract","getReadOnlyFunctionCallApiUrl","encodeURIComponent","getInfoUrl","getBlockTimeInfoUrl","getPoxInfoUrl","getRewardsUrl","limit","getRewardsTotalUrl","getRewardHoldersUrl","getStackerInfoUrl","fetchFn","getNameInfo","fullyQualifiedName","nameLookupURL","resp","nameInfo","fromName","networkName","StacksMainnet","StacksTestnet","fromNameOrNetwork","network","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","getTypeUnion","encodeClarityValue","union","getTypeString","abiFunctionToString","access","matchType","abiType","abiTupleEntry","validateContractCall","abi","filtered","functions","fn","abiArgs","payloadArg","abiArg","argNum","parseToCV","typeString","TransactionSigner","transaction","originDone","checkOversign","checkOverlap","nextVerify","originSigHash","signOrigin","nextSighash","appendOrigin","signSponsor","getTxInComplete","resume","getNonce","derivedNetwork","estimateTransfer","deriveNetwork","Accept","feeRateResult","txBytes","estimateTransaction","transactionPayload","estimatedLen","transaction_payload","estimated_len","estimations","broadcastTransaction","attachment","rawTx","broadcastRawTransaction","getAbi","catch","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","sponsored","authorization","numSignatures","lpPostConditions","estimateTransactionByteLength","txFee","addressVersion","senderAddress","txNonce","makeSTXTokenTransfer","senderKey","signerKeys","pk","estimateContractDeploy","makeContractDeploy","unsignedTxOptions","makeUnsignedContractDeploy","addressHashMode","estimateContractFunctionCall","makeUnsignedContractCall","validateWithAbi","makeContractCall","makeStandardSTXPostCondition","makeContractSTXPostCondition","makeStandardFungiblePostCondition","makeContractFungiblePostCondition","makeStandardNonFungiblePostCondition","makeContractNonFungiblePostCondition","callReadOnlyFunction","readOnlyFunctionOptions","sender","arguments","responseJson","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","sponsorPubKey","sponsorPrivateKey","createSponsorSigner","multiSigSpendingCondition","existingSignatures","totalSignatureLength","STRUCTURED_DATA_PREFIX","hashStructuredData","structuredData","encodeStructuredData","domain","structuredDataHash","domainHash","decodeStructuredDataSignature","encodedMessageBytes","signStructuredData","StructuredDataSignature"],"sourceRoot":""}